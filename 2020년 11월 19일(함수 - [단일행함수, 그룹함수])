
2020년 11월 19일


함수(Function)

= 메소드

하나의 큰 프로그램에서 반복적으로 사용되는 부분들을 분리하여

작성해 놓은 작은 서브 프로그램

호출하며 값을 전달하면 결과를 리턴하는 방식으로 사용


함수의 종류는 굉장히 다양함

미리 명령어들 쭉 작성해 놓은것에 이름 붙여놓은 것

->

미리 만들어진 함수를 호출, 부르면서 (나 이거 쓸게)

특정 입력값을 전달하게 되면 입력값을 가지고 기능을 수행하고

수행한 결과를 리턴, 즉 돌려준다.


크게 두가지 유형

1. 단일 행 함수

여러 개 값 전달

다양한 기능을 수행하는 것은 똑같은데 결과 값 여러개 (입력값 여러개에 따라서)


데이터 하나하나가 입력값이고 그 하나하나에 대한 결과값

각 행마다 반복적으로 적용되어 입력 받은 행의 개수만큼 결과 반환


2. 그룹 함수

입력값은 여러개이지만 결과 값은 1개인 경우

특정 행들의 집합으로 그룹이 형성되어 적용됨

그룹 당 1개의 결과 반환



----------------------------------------------------------------------------------


데이터에는 다양한 문자가 들어간다.

여러가지 형태로 가공을 한다던지, 정보를 얻는다던지


문자처리 함수


입력 값 타입 -> 문자 처리위함이니까 전부 CHARACTER


리턴 값 타입 ->

결과값이 숫자 형태인 NUMBER ,

문자 형태인 CHARACTER


100% 다 외울순 없지만 이런 기능이 있구나 하고 나중에 찾아서 쓸 수 있게


- LENGTH

주어진 컬럼 값/ 문자열의 길이(문자 개수) 반환



----------------------------------------------------------------------------------


/* 함수(FUNCTION)

특정 기능을 가진 도구

컬럼의 값을 읽어서 기능을 수행하고 결과값을 리턴해줌

- 단일행(SINGLE ROW) 함수 : 컬럼에 기록된 N개의 값을 읽어서 N개의 결과를 리턴

- 그룹(GROUP) 함수 : 컬럼에 기록된 N개의 값을 읽어서 M개의 결과를 리턴

- M개(1개가 될 수도 있고 여러 개가 될 수도 있음)


SQL문에서 함수를 사용할 수 있는 위치 :

SELECT 절, WHERE 절, GROUP BY 절, HAVING 절, ORDER BY 절

SELECT 절에 단일행 함수와 그룹함수를 함께 사용하지는 못함

이유 : 결과 행의 갯수가 다르기 때문에


사용법 : 함수명(입력값)

*/


/* DUAL 테이블

오라클 기본 테이블

모든 사용자가 사용 가능한 임시 테이블

SYS 소유의 테이블이기 때문에 테이블 리스트에는 포함되지 않음


용도

SELECT 만으로 데이터를 조회하고 싶을 때

내장함수 출력하고 싶을 때

계산식 출력해보고 싶을 때

임시 데이터 만들 때

*/


SELECT * FROM DUAL;

SELECT 'HELLO' FROM DUAL ; -- 출력하고 싶은데 테이블이 따로 없을 때 DUAL 테이블 사용


---------------------------------------------------

-- 단일행 함수

-- 문자열 처리 함수

-- 숫자 처리 함수

-- 날짜 함수

-- 형변환 함수

-- NULL 처리 함수

---------------------------------------------------


---------------------------------------------------

-- 문자 처리 함수

-- LENGTH, LENGTHB, SUBSTR, UPPER, LOWER, INSTR ...

---------------------------------------------------


-- LENGTH(컬럼명 | '문자열값') : 글자의 갯수를 리턴

SELECT LENGTH('HELLO') FROM DUAL ; -- 'HELLO' 문자열의 길이 : 5

SELECT LENGTH('원격수업은....') FROM DUAL; -- '원격수업은....' 문자열의 길이 : 9

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, LENGTH(EMAIL) FROM EMPLOYEE; -- 직원테이블의 이메일 길이

입력된 값 만큼의 결과가 나온다



-- LENGTHB(컬럼명 | '문자열값') : 글자의 바이트 수를 리턴

SELECT LENGTHB('HELLO') FROM DUAL; --'HELLO' 문자열의 바이트 수 : 5

SELECT LENGTHB('원격수업은....') FROM DUAL; -- '원격수업은....' 문자열의 바이트 수 : 19

-- 한글 3BYTE로 처리됨



-- INSTR : 지정한 위치부터 지정한 숫자번째로 나타나는 문자의 시작 위치 반환

(자바에서 indexOf랑 비슷)

-- 특정문자열에서 원하는 문자를 찾아서 위치를 반환

-- 시작위치는 1부터 시작

-- INSTR('문자열' | 컬럼명, '찾을 문자' [,찾을 위치의 시작값][, 빈도])

-- 찾을 위치의 시작값 : 양수 - 앞에서부터 검색, 음수 - 뒤에서 부터 검색

-- 빈도(기본값 1) : 찾을 문자가 여러 개 인 경우 몇번째 문자를 찾을 것인지 결정


SELECT INSTR('ABCDEFGHI','F') FROM DUAL; --'ABCEDFGHI' 문자열에서 'F'의 위치 찾기 : 6

SELECT INSTR('ABCDEFGHI','F',1) FROM DUAL; -- 찾을 문자가 1개만 있을 때는 시작값에 상관없이 동일한 위치값

SELECT INSTR('ABCDEFGHI','F',-1) FROM DUAL; -- 찾을 문자가 1개만 있을 때는 시작값에 상관없이 동일한 위치값

SELECT INSTR('ABFCDEFGHI','F',1) FROM DUAL; -- 앞에서 부터 찾을 때는 앞에 있는 'F'의 위치값 : 3

SELECT INSTR('ABFCDEFGHI','F',-1) FROM DUAL; -- 뒤에서 부터 찾을 때는 뒤에 있는 'F'의 위치값 : 7


-- 빈도

앞에서 부터 찾는데 , 첫번째 만나는 F를 찾고 싶어

SELECT INSTR('ABFCDEFGHI','F',1,1) FROM DUAL; -- 앞에서 부터 첫번째 위치한 'F'의 위치값 : 3

앞에서 부터 찾는데 , 두번째 만나는 F를 찾고 싶어

SELECT INSTR('ABFCDEFGHI','F',1,2) FROM DUAL; -- 앞에서 부터 두번째 위치한 'F'의 위치값 : 7


뒤에서 부터 찾는데, 첫번째 만나는 F를 찾고 싶어

SELECT INSTR('ABFCDEFGHI','F',-1,1) FROM DUAL; -- 7

뒤에서 부터 찾는데, 두번째 만나는 F를 찾고 싶어

SELECT INSTR('ABFCDEFGHI','F',-1,2) FROM DUAL; -- 3


SELECT INSTR('ABABBBAABBA','A')FROM DUAL; -- 1

SELECT INSTR('ABABBBAABBA','A',1) FROM DUAL; -- 1

SELECT INSTR('ABABBBAABBA','A',-1) FROM DUAL; -- 11

SELECT INSTR('ABABBBAABBA','A',1,1) FROM DUAL; -- 1

SELECT INSTR('ABABBBAABBA','A',1,2) FROM DUAL; -- 3

SELECT INSTR('ABABBBAABBA','A',1,3) FROM DUAL; -- 7

SELECT INSTR('ABABBBAABBA','A',1,4) FROM DUAL; -- 8

SELECT INSTR('ABABBBAABBA','A',1,5) FROM DUAL; -- 11


-- @의 위치를 알고 싶어

SELECT EMAIL, INSTR(EMAIL,'@') FROM EMPLOYEE;

-- 아이디의 길이를 알고 싶어

SELECT EMAIL, INSTR(EMAIL,'@')-1 AS 아이디길이 FROM EMPLOYEE;



-- LPAD/RPAD : 주어진 컬럼 문자열에 임의의 문자열을 덧붙여 길이 N의 문자열을 반환하는 함수

-- LPAD('문자열' | 컬럼명, 반환할 문자열의 길이 [, 덧붙여줄 문자])

-- padding


SELECT LPAD(EMAIL, 15, '#') FROM EMPLOYEE;

입력데이터가 반환할 문자열의 길이보다 크면 잘린다.


SELECT LPAD(EMAIL, 20, '#') FROM EMPLOYEE;

SELECT LPAD(EMAIL, 20) FROM EMPLOYEE;

SELECT RPAD(EMAIL, 20,'#') FROM EMPLOYEE;

SELECT RPAD(EMAIL, 20) FROM EMPLOYEE;


-- LTRIM / RTRIM : 주어진 컬럼이나 문자열 왼쪽/ 오른쪽에서 지정한 문자 혹은 문자열을 제거한 나머지를 반환


-- LTRIM('문자열' | 컬럼명[, 제거할 문자])

-- 제거할 문자를 생략하면 공백 제거


SELECT LTRIM(' KH ') FROM DUAL; -- 왼쪽에 있는 공백 제거

SELECT RTRIM(' KH ') FROM DUAL; -- 오른쪽에 있는 공백 제거

SELECT LTRIM('KHKH1234KHKH','KH') FROM DUAL; -- 왼쪽에 있는 KH 삭제

SELECT RTRIM('KHKH1234KHKH','KH') FROM DUAL; -- 오른쪽에 있는 KH 삭제

SELECT RTRIM(LTRIM(' KH ')) FROM DUAL;

-- TRIM은 선택을 할 수 있다, 왼쪽을 삭제할건지 오른쪽을 삭제할건지 둘 다 삭제할건지

SELECT TRIM(LEADING FROM ' KH ') FROM DUAL; -- 왼쪽 삭제 LTRIM과 동일

SELECT TRIM(TRAILING FROM ' KH ') FROM DUAL; -- 오른쪽 삭제 RTRIM과 동일

SELECT TRIM(BOTH FROM ' KH ') FROM DUAL; -- 양쪽 모두 제거


SELECT TRIM(BOTH 'K' FROM 'KHKH1234KHKH') FROM DUAL; -- HKH1234KHKH

TRIM은 문자열을 지정해서 삭제할 수는 없고 단일문자만 지정해서 삭제 할 수 있다.

KH를 삭제하고 싶으면 SELECT RTRIM(LTRIM('KHKH1234KHKH','KH')) FROM DUAL; 사용해야 한다.


SELECT TRIM(BOTH 'K' FROM 'KKK1234KKK') FROM DUAL; -- 1234




-- SUBSTR : 컬럼이나 문자열에서 지정한 위치로부터 지정한 개수의 문자열을 잘라서 리턴

-- SUBSTR(문자열, 시작위치, 개수)

생각보다 많이 쓰임, 특정 문자열 안에서 내가 원하는 문자열을 잘라오기 위한


SELECT SUBSTR('SHOWMETHEMONEY', 5, 2)FROM DUAL; -- ME : 5번째 부터 2글자

SELECT SUBSTR('SHOWMETHEMONEY', 7) FROM DUAL; -- THEMONEY : 7번째 부터 끝까지

SELECT SUBSTR('SHOWMETHEMONEY', -8, 3) FROM DUAL; -- THE : 끝에서 8번째 부터 3글자


SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, SUBSTR(EMP_NO,8,1) FROM EMPLOYEE;



-- LOWER / UPPER / INITCAP : 대소문자 변경

SELECT LOWER('Welcome To My World') FROM DUAL; -- welcome to my world : 모두 소문자로 변환

SELECT UPPER('Welcome To My World') FROM DUAL; -- WELCOME TO MY WORLD : 모두 대문자로 변환

SELECT INITCAP('welcome to my world') FROM DUAL; -- Welcome To My World : 단어의 첫글자를 대문자로 변환

-- INITCAP : 공백 또는 특수문자를 기준으로 첫글자를 대문자로 변환



-- CONCAT : 문자열 혹은 컬럼을 입력받아 하나로 합친 후 리턴

문자열을 합해주는 함수


SELECT CONCAT('가나다라','ABCD') FROM DUAL;

SELECT '가나다라' || 'ABCD' FROM DUAL;



-- REPLACE : 컬럼의 문자 혹은 문자열에서 특정 문자(열)을 지정한 문자(열)로 바꾼 후 반환

-- REPLACE(STRING, STR1, STR2)

STRING : 문자 타입 컬럼 또는 문자열

STR1 : 변경하려고 하는 문자 혹은 문자열

STR2 : 변경하고자 하는 문자 혹은 문자열


SELECT REPLACE('WELCOME TO ORACLE','ORACLE','MYSQL') FROM DUAL;

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, EMAIL, REPLACE(EMAIL, 'kh', 'iei') AS 변경된메일 FROM EMPLOYEE;


-- 직원테이블에서 주민번호를 조회해서 생년, 생월, 생일을 각각 분리하여 조회

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME 사원명,

SUBSTR(EMP_NO,1,2) 생년,

SUBSTR(EMP_NO,3,2) 생월,

SUBSTR(EMP_NO,5,2) 생일

FROM EMPLOYEE;


-- 여직원들의 모든 컬럼 정보를 조회

SELECT * FROM EMPLOYEE WHERE SUBSTR(EMP_NO,8,1) = 2;


--------------------------------------------------------------------------------


-- 함수 중첩 사용 : 함수안에서 또 다른 함수를 사용할 수 있음

-- 직원테이블에서 사원명, 주민번호 조회

-- 단, 주민번호는 생년월일만 보이게하고, '-' 다음 값은 '*'로 변경

SELECT EMP_NAME 사원명, SUBSTR(EMP_NO,1,7)||'*******' AS 주민번호 FROM EMPLOYEE;

SELECT EMP_NAME 사원명, RPAD(SUBSTR(EMP_NO,1,7),14,'*') AS 주민번호 FROM EMPLOYEE;


--------------------------------------------------------------------------------

-- 숫자 처리 함수

-- ABS, MOD, ROUND, FLOOR, TRUNC, CEIL

--------------------------------------------------------------------------------


-- ABS : 절대값을 구하여 리턴하는 함수

-- ABS(숫자 | 숫자로 된 컬럼명) 컬럼의 데이터형이 숫자인것

SELECT ABS(-10) FROM DUAL;

SELECT ABS(10) FROM DUAL;


-- MOD : 나머지를 구하는 함수(%)

-- MOD(나누어지는 수, 나눌 수 )

SELECT MOD(10, 5) FROM DUAL; -- 0

SELECT MOD(10, 3) FROM DUAL; -- 1


-- ROUND : 반올림하여 리턴하는 함수

-- ROUND(숫자 [, 위치])

SELECT ROUND(123.456) FROM DUAL; -- 123

-- 기본적으로 소수점을 기준으로 반올림

SELECT ROUND(123.656) FROM DUAL; -- 124

SELECT ROUND(123.456, 1) FROM DUAL; -- 123.5

SELECT ROUND(123.456, 2) FROM DUAL; -- 123.46

SELECT ROUND(123.456, -2) FROM DUAL; -- 100

SELECT ROUND(568.456, -1) FROM DUAL; -- 570


-- FLOOR : 소수점을 기준으로 내림하여 리턴하는 함수 (위치를 지원하지 않음)

-- FLOOR(숫자)

SELECT FLOOR(123.456) FROM DUAL; -- 123

SELECT FLOOR(123.656) FROM DUAL; -- 123


-- TRUNC : 내림하여 리턴하는 함수

-- TRUNC(숫자, [, 위치])

SELECT TRUNC(123.456) FROM DUAL; -- 123

SELECT TRUNC(123.656) FROM DUAL; -- 123

SELECT TRUNC(123.456, 1) FROM DUAL; -- 123.4

SELECT TRUNC(123.456, 2) FROM DUAL; -- 123.45

SELECT TRUNC(123.456, -2) FROM DUAL; -- 100

SELECT TRUNC(568.456, -1) FROM DUAL; -- 560


-- CEIL : 올림하여 리턴하는 함수

-- CEIL(숫자)

SELECT CEIL(123.456) FROM DUAL; -- 124

SELECT CEIL(123.656) FROM DUAL; -- 124


--------------------------------------------------------------------------------

-- 날짜 처리 함수

-- SYSDATE, MONTHS_BETWEEN, ADD_MONTHS, NEXT_DAY, LAST_DAY, EXTRACT


게시글을 등록하는 일자,

회원 가입 한 날짜,

데이터베이스에 저장해놓거나 데이터베이스에 저장해놓은 것을 가져다 사용하는 경우

--------------------------------------------------------------------------------


-- SYSADATE : 시스템에 저장되어 있는 날짜를 반환하는 함수

SELECT SYSDATE FROM DUAL;


-- MONTHS_BETWEEN(날짜, 날짜) : 개월 수의 차이를 숫자로 반환하는 함수

SELECT * FROM EMPLOYEE;

SELECT EMP_NAME,

HIRE_DATE,

CEIL(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) 개월수

FROM EMPLOYEE;


-- ADD_MONTHS(날짜, 숫자) : 날짜에 숫자만큼 개월수를 더하여 날짜를 반환하는 함수

SELECT ADD_MONTHS(SYSDATE, 5) FROM DUAL;


-- 직원테이블에서 사원의 이름, 입사일, 입사 후 6개월이 된 날짜를 조회

SELECT EMP_NAME, HIRE_DATE, ADD_MONTHS(HIRE_DATE, 6) 입사6개월 FROM EMPLOYEE;


-- NEXT_DAY : 기준날짜에서 구하려는 요일의 가장 가까운 날짜를 반환하는 함수

-- NEXT_DAY(기준날짜, 요일)

-- 요일 : 문자, 숫자

SELECT SYSDATE, NEXT_DAY(SYSDATE, '목요일') FROM DUAL;

SELECT SYSDATE, NEXT_DAY(SYSDATE, 5) FROM DUAL;

-- 일요일부터 1로 처리

SELECT SYSDATE, NEXT_DAY(SYSDATE, '목') FROM DUAL;

SELECT SYSDATE, NEXT_DAY(SYSDATE, 'FRIDAY') FROM DUAL; -- 에러

-- 문자셋

ALTER SESSION SET NLS_LANGUAGE = AMERICAN;

SELECT SYSDATE, NEXT_DAY(SYSDATE, 'FRIDAY') FROM DUAL;

SELECT SYSDATE, NEXT_DAY(SYSDATE, '금요일') FROM DUAL; -- 에러

ALTER SESSION SET NLS_LANGUAGE = KOREAN;


-- LAST_DAY(날짜) : 해당 월의 마지막 날짜를 구하여 반환해주는 함수

SELECT SYSDATE, LAST_DAY(SYSDATE) FROM DUAL; -- 이번달 마지막날

SELECT SYSDATE, LAST_DAY(ADD_MONTHS(SYSDATE,1)) FROM DUAL; -- 다음달 마지막날


-- 직원테이블에서 근무년수가 20년 이상인 직원 조회

SELECT * FROM EMPLOYEE WHERE MONTHS_BETWEEN(SYSDATE, HIRE_DATE) >= 120;

SELECT * FROM EMPLOYEE WHERE MONTHS_BETWEEN(HIRE_DATE, SYSDATE) >= 120;

SELECT MONTHS_BETWEEN(SYSDATE, HIRE_DATE) ,

MONTHS_BETWEEN(HIRE_DATE,SYSDATE)

FROM EMPLOYEE;


-- 직원테이블에서 사원명, 입사일, 입사한 월의 근무일수를 조회

SELECT EMP_NAME, HIRE_DATE,

LAST_DAY(HIRE_DATE) - HIRE_DATE "입사월 근무일수"

FROM EMPLOYEE;


-- EXTRACT : 년, 월, 일 정보를 추출하여 반환하는 함수

-- EXTRACT(YEAR FROM 날짜) : 년도를 반환

-- EXTRACT(MONTH FROM 날짜) : 월을 반환

-- EXTRACT(DAY FROM 날짜) : 일을 반환

SELECT EXTRACT(YEAR FROM SYSDATE) 년도,

EXTRACT(MONTH FROM SYSDATE) 월,

EXTRACT(DAY FROM SYSDATE) 일

FROM DUAL;


---------------------------------------------------------------

-- 형변환 함수

-- TO_CHAR

-- TO_DATE

-- TO_NUMBER

---------------------------------------------------------------


-- TO_CHAR(날짜 [, 포맷]) : 날짜형 데이터를 문자형 데이터로 변환

-- 날짜 형태 데이터를 입력받아서 내가 원하는 형식으로 반환해주는 것

SELECT SYSDATE FROM DUAL; -- 20/11/19

SELECT TO_CHAR(SYSDATE) FROM DUAL; -- 20/11/19

SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL; -- 2020-11-19

SELECT TO_CHAR(SYSDATE, 'YY-MM-DD') FROM DUAL; -- 20-11-19

SELECT TO_CHAR(SYSDATE, 'PM HH:MI:SS') FROM DUAL; -- 오후 03:28:22

SELECT TO_CHAR(SYSDATE, 'PM HH24:MI:SS') FROM DUAL; -- 오후 15:28:12

SELECT TO_CHAR(SYSDATE, 'AM HH24:MI:SS') FROM DUAL; -- 오후 15:28:03

SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MI:SS') FROM DUAL; -- 2020-11-19 03:27:41

-- 년도에 대한 포맷 문자는 'Y', 'R'

-- 'RRRR' 두자리 년도를 네자리로 바꿀 때 50년 미만이면 2000년을 적용

-- , 50년 이상이면 1900년을 적용

-- 90/12/30 -> 90 + 1900 = 1990

-- 20/11/30 -> 20 + 2000 = 2020

SELECT EMP_NAME, HIRE_DATE,

TO_CHAR(HIRE_DATE, 'YYYY'),

TO_CHAR(HIRE_DATE, 'RRRR')

FROM EMPLOYEE;


-- TO_CHAR(숫자 [, 포맷]) : 숫자형 데이터를 문자형 데이터로 변환

SELECT TO_CHAR(1234) FROM DUAL;

SELECT TO_CHAR(1234,'99999999') FROM DUAL; -- 1234

SELECT TO_CHAR(1234,'00000000') FROM DUAL; -- 00001234

SELECT TO_CHAR(1234,'L99999999') FROM DUAL; -- ￦1234

SELECT TO_CHAR(1234,'$99999999') FROM DUAL; -- $1234

SELECT TO_CHAR(1234,'99,999,999') FROM DUAL; -- 1,234

SELECT TO_CHAR(1234,'00,000,000') FROM DUAL; -- 00,001,234

SELECT TO_CHAR(1234,'9.9EEEE') FROM DUAL; -- 1.2E+03

SELECT TO_CHAR(1234,'9999') FROM DUAL; -- 1234

SELECT TO_CHAR(12345,'9999') FROM DUAL; --#####


-- TO_DATE(문자 [,포맷]) : 문자형 데이터를 날짜로 변환하여 반환

SELECT TO_DATE('20201119') FROM DUAL; -- 20/11/19

SELECT TO_DATE('20150512', 'YY-MM-DD') FROM DUAL; -- 15/05/12

SELECT TO_CHAR(TO_DATE('20150512'),'YYYY-MM-DD') FROM DUAL;

-- 문자형을 날짜형태로 바꾸고 TO_CHAR을 써서 원하는 형으로 출력

SELECT TO_CHAR(TO_DATE('14/5/20'),'YYYY-MM-DD') FROM DUAL; -- 2014-05-20

SELECT TO_CHAR(TO_DATE('80/3/2'),'RRRR-MM-DD') FROM DUAL; -- 1980-03-02

SELECT TO_CHAR(TO_DATE('20150512'),'YYYY') FROM DUAL; -- 2015


-- TO_DATE(숫자 [,포맷]) : 숫자형 데이터를 날짜로 변환하여 반환

SELECT TO_DATE(20150512) FROM DUAL; -- 15/05/12

SELECT TO_CHAR(TO_DATE(20150512),'YYYY-MM-DD')FROM DUAL; -- 2015-05-12

SELECT TO_CHAR(TO_DATE(20150512),'YYYY"년" MM"월" DD"일"')FROM DUAL; -- 2015년 05월 12일


-- TO_NUMBER(문자 [, 포맷]) : 문자형 데이터를 숫자로 변환하여 반환

SELECT '10'+'20' FROM DUAL; -- 자동형변환

SELECT TO_NUMBER('1234') FROM DUAL; -- 강제형변환

-- 안에 들어가는 문자부분은 숫자형태 값들만 들어와야 한다.


---------------------------------------------------------------

-- NULL 처리 함수

-- NVL : NULL로 되어 있는 컬럼의 값을 인자로 지정한 숫자 혹은 문자로 변경하여 반환

---------------------------------------------------------------


-- NVL(NULL인지 검사할 값, NULL일 때 바꿀 값)

-- NVL(P1,P2) -> P1에 NULL이 있으면 P2로 바꿔라

*P1: NULL 데이터를 처리할 컬럼명 혹은 값

*P2: NULL 값을 대체하고자 하는 값


-- BONUS에 NULL이 있으면 0으로 바꿔라

SELECT EMP_NAME, SALARY, NVL(BONUS,0) ,

SALARY*NVL(BONUS,0) AS 보너스금액,

SALARY + (SALARY*NVL(BONUS,0)) AS "총 급여"

FROM EMPLOYEE;


-- 부서명에 NULL이 있으면 '부서없음'이라고 나오게 해라

SELECT EMP_NAME, NVL(DEPT_CODE,'부서없음') FROM EMPLOYEE;


-- NVL2(NULL인지 검사할 값, NULL이 아닐 때 바꿀 값1, NULL일때 바꿀 값2)

-- 부서명에 NULL이 있으면 '부서없음', NULL이 아니라면 '부서있음'이 나오게 해라

SELECT EMP_NAME, NVL2(DEPT_CODE,'부서있음','부서없음') FROM EMPLOYEE;


---------------------------------------------------------------

-- 선택함수

-- 여러가지 경우에 선택할 수 있는 기능을 제공

-- 자바의 SWITCH와 비슷함

-- DECODE(조건식 | 컬럼명, 조건값1, 선택값1, 조건값2, 선택값2,....)

-- 조건식의 결과 값과 일치하는 조건값을 찾아서 바로 뒤의 선택값을 사용

---------------------------------------------------------------

SELECT DECODE('1','1','1입니다','2','2입니다') FROM DUAL; -- 1입니다

SELECT DECODE('2','1','1입니다','2','2입니다') FROM DUAL; -- 2입니다

SELECT DECODE('5','1','1입니다','2','2입니다','그외 입니다.') FROM DUAL; -- 그외 입니다.


SELECT EMP_NAME, EMP_ID,

DECODE(SUBSTR(EMP_NO,8,1),'1','남','2','여') AS 성별

FROM EMPLOYEE;


-- CASE WHEN 조건식 THEN 결과값

-- WHEN 조건식 THEN 결과값

-- ELSE 결과값

-- END


-- 직급코드에 따라 급여인상 할 것임, 직급코드에 따라 인상률이 다르다.

SELECT EMP_NAME, JOB_CODE, SALARY,

CASE WHEN JOB_CODE = 'J7' THEN SALARY * 1.1

WHEN JOB_CODE = 'J6' THEN SALARY * 1.15

WHEN JOB_CODE = 'J5' THEN SALARY * 1.2

ELSE SALARY * 1.0

END AS 인상급여

FROM EMPLOYEE;



--------------------------------------------------------

-- 그룹 함수

-- SUM, AVG, MAX, MIN, COUNT

--------------------------------------------------------

-- SUM(숫자가 기록된 컬럼명) : 합계를 구하여 반환

SELECT SUM(SALARY) FROM EMPLOYEE;


-- AVG(숫자가 기록된 컬럼명) : 평균을 구하여 반환

SELECT AVG(SALARY) FROM EMPLOYEE;


-- MIN(컬럼명) : 컬럼에서 가장 작은 값 리턴

-- 취급하는 자료형은 ANY TYPE

SELECT MIN(SALARY) FROM EMPLOYEE;

SELECT MIN(HIRE_DATE) FROM EMPLOYEE;

SELECT MIN(EMAIL) FROM EMPLOYEE; -- bang_ms@kh.or.kr , b가 가장 앞이라서


-- MAX(컬럼명) : 컬럼에서 가장 큰 값 리턴

-- 취급하는 자료형은 ANY TYPE

SELECT MAX(SALARY) FROM EMPLOYEE;

SELECT MAX(HIRE_DATE) FROM EMPLOYEE;

SELECT MAX(EMAIL) FROM EMPLOYEE; --youn_eh@kh.or.kr



-- COUNT(* | 컬럼명) : 행의 갯수를 헤아려서 반환

-- COUNT(컬럼명) : NULL을 제외한 실제 값이 기록된 행 갯수를 반환

-- COUNT(*) : NULL을 포함한 전체 행 갯수를 반환

-- COUNT([DISTINCT]컬럼명) : 중복을 제거한 행 갯수를 반환


SELECT COUNT(BONUS) FROM EMPLOYEE; -- 9 : NUJLL 제외 행 갯수

SELECT COUNT(DISTINCT BONUS) FROM EMPLOYEE; -- 6 : 중복제거 행 갯수

SELECT COUNT(*) FROM EMPLOYEE; -- 23 : NULL을 포함한 전체 행 갯수

SELECT COUNT(EMP_NAME) FROM EMPLOYEE; -- 23 : NULL을 제외한 행 갯수 (NULL이 없어서 23개 다 나왔을 뿐)

SELECT COUNT(DEPT_CODE) FROM EMPLOYEE; -- 21 : NULL 제외 행 갯수

SELECT COUNT(DISTINCT DEPT_CODE) FROM EMPLOYEE; -- 6 : 중복제거 행 갯수


SELECT * FROM EMPLOYEE;
