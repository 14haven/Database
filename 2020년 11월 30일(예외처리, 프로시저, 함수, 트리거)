2020년 11월 30일

DECLARE 안에 각각의 변수 선언
BEGIN 안에 실제 실행할 명령문들을 넣어줌
SQL문이 들어갈 수도 있고, 변수에 데이터를 담는 용도로 사용 할 수 있고
DBMS에서 제공하는 출력문 ->  DBMS_OUTPUT.PUT_LINE
제어문(특정 조건에 따라서 실행할지말지 결정, 조건에 따라서 선택해서 실행, 조건에 따라 특정 횟수 반복)
IF, ELSE, ELSIF
CASE : 선택문
반복문 : LOOP, FOR LOOP


반복문 
    1. BASIC LOOP : 조건없이 무한 반복
        LOOP
            반복할 내용;
        END LOOP;
    2. FOR LOOP : 카운트용 변수를 이용해 원하는 횟수만큼 반복
        FOR <카운트용변수명> IN [REVERSE] <시작값>..<종료값> LOOP
            반복할 내용;
        END LOOP;
    3. WHILE LOOP : 조건이 TRUE인 동안 반복 
        WHILE 조건문 LOOP
            반복할 내용;
        END LOOP;

FOR LOOP는 시작값, 종료값까지 반복
WHILE은 내가 조금 더 조건을 자유롭게 줄 수 있다. 다양한 식 등을 넣을 수 있다.

------------------------------------------------------------------------------

-- WHILE LOOP
    -- 1~5까지 출력
SET SERVEROUTPUT ON;
DECLARE
    N NUMBER := 1;
BEGIN
    WHILE N<=5 LOOP
        DBMS_OUTPUT.PUT_LINE(N);
        N := N+1;
    END LOOP;
END;
/

------------------------------------------------------------------------------

시스템 오류 예외처리
    시스템오류(메모리초과, 인덱스 중복 키, 데이터없음 ...)
    오라클이 정의하는 에러로 보통 PL/SQL 실행엔진이 오류조건을 탐지하여 발생시키는 예외
    EXCEPTION(예외) 이름을 아는 경우와 모르는 경우에 대하여 사용하는 방법이 다름

------------------------------------------------------------------------------

-- 예외(EXCEPTION) 이름을 아는 경우 (별칭처럼 붙여진 이름을 안다)
        오라클에서 미리 정의해놓은 EXCEPTION

    예외 처리
    시스템 상에 오류가 발생했을 때 예외를 처리해주는 구문
    EXCEPTION
        WHEN 예외이름1 THEN 처리문장1
        [WHEN 예외이름2 THEN 처리문장2 ...]
        [WHEN OTHERS THEN 처리문장3]
    END;
    /

    ACCESS_INTO NULL
        초기화되지 않은 오브젝트에 값을 할당하려고 할 때
    CASE_NOT_FOUND 
        CASE문장에서 ELSE구문도 없고 WHEN절에 명시된 조건을 만족하는 것이 없을 경우
   COLLECTION_IS_NULL
        초기화되지 않은 중첩 테이블이나 VARRAY같은 컬렉션을 
        EXISTS외의 다른 메소드로 접근을 시도할 경우     
    CURSOR_ALREADY_OPEN
        이미 오픈된 커서를 다시 오픈하려고 시도하는 경우
    DUP_VAL_ON_INDEX
        UNIQUE 인덱스가 설정된 컬럼에 중복 데이터를 입력할 경우
    INVALID_CURSOR
        허용되지 않은 커서에 접근할 경우 (OPEN되지 않은 커서를 닫으려고 할 경우)
    INVALID_NUMBER
        SQL문장에서 문자형 데이터를 숫자형으로 변환할 때 제대로 된 숫자로 변환되지 않을 경우
    LOGIN_DENIED
        잘못된 사용자명이나 비밀번호로 접속을 시도할 때
    NO_DATA_FOUND
        SELECT INTO 문장의 결과로 선택된 행이 하나도 없을 경우

------------------------------------------------------------------------------

-- 중복 데이터 입력 에러(DUP_VAL_ON_INDEX)
SELECT * FROM DEPARTMENT;
    -- 제약조건 확인 : DEPT_ID 컬럼에 PRIMARY KEY 제약조건 설정되어 있음(NOT NULL + UNIQUE)
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPARTMENT';
SELECT * FROM USER_CONS_COLUMNS WHERE CONSTRAINT_NAME = 'DEPARTMENT_PK';

BEGIN
    INSERT INTO DEPARTMENT VALUES('D1','기술부','L2');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('중복된 코드를 입력할 수 없습니다.');
END;
/

------------------------------------------------------------------------------

-- EXCEPTION(예외) 이름을 모르는 경우
    선언영역(DECLARE)에 프로그램 지시자인 PRAGMA 키워드와 EXCEPTION_INIT() 함수로
    예외를 직접 정의하여 사용함
    - PRAGMA : 컴파일러에게 직접 명령을 내리는 지시자
    - EXCEPTION_INIT() 함수 : 컴파일 시간 명령어 또는 예외명과 내부 오류코드를 연관짓는 프라그마로 
        컴파일러에게 EXCEPTION으로 선언된 식별자를 지정된 오류번호와 연관짓게 함
        
    EXCEPTION 이름을 모르기 때문에 컴파일러에게 예외 이름과 내부 오류코드를 직접 연관지어 알려줌
    내가 직접 이름을 붙여서 컴파일러에게 알려주겠다
    이런 코드의 오류가 발생했을 때는 오류를 처리해라

    사용법 :
        DECLARE
            <예외변수명> EXCEPTION;  -- 예외타입의 변수 선언
            PRAGMA EXCEPTION_INIT(<예외변수명>, <에러코드>);
        BEGIN
            실행내용;
        EXCEPTION
            WHEN <예외변수명> THEN 처리내용;

-----------------------------------------------------------------------------

DECLARE
    UNQ_ERR EXCEPTION;
    PRAGMA EXCEPTION_INIT(UNQ_ERR,-00001);
BEGIN
    INSERT INTO DEPARTMENT VALUES('D1','기술부','L2');
EXCEPTION
    WHEN UNQ_ERR THEN
        DBMS_OUTPUT.PUT_LINE('중복된 코드입니다.');
END;
/

------------------------------------------------------------------------------

여태까지 한 것 -> 이름 없는 블록
미리 만들어 놓고 필요할 때 그때그때 불러서 사용하기 위해서는 이름을 붙여놔야 한다.

PL/SQL에 이름을 붙여서 사용할 수 있는 것 ->
PROCEDURE & FUNCTION

두개는 여러 명령문들을 묶어서 이름을 붙여 미리 정의 해 놓고
이것들을 내가 원할 때 언제든지 불러서 사용하는 것
반환값이 필수로 들어가야하냐 마냐에 따라 둘이 나뉜다.



------------------------------------------------------------------------------

    저장 프로시저(STORED PROCEDURE)
    PL/SQL문을 저장하는 객체
    일련의 작업 절차를 미리 정리해서 저장해 둔것
    여러 SQL문을 묶어서 미리 정의해 두고 하나의 요청으로 실행 할 수 있음
    자주 사용되는 복잡한 작업들을 간단하게 미리 만들어두면 쉽게 사용이 가능함
    
    프로시저 작성 방법
     - 매개변수의 데이터형의 크기는 지정하면 안됨(테이블.컬럼%TYPE 은 가능)
     - SELECT 사용시 INTO를 통해 변수에 값을 저장해서 사용해야 함 (SELECT 자체만으로는 출력안됨)
     
    정의방법
        CREATE PROCEDURE <프로시저명> (<매개변수명> [MODE] DATATYPE[,...])
        IS
            지역변수 선언;
        BEGIN
            실행할 내용;
        END;
        /
    
        [MODE]
            IN : 데이터를 입력받을 때(기본값)
            OUT : 데이터를 반환할 때
            INOUT : 두가지 목적 모두에 사용(실제로는 사용되지 않음)
    실행방법
        EXECUTE <프로시저명>[<전달값>[,...]];

---------------------------------------------------------------------------

-- 기본 프로시저 정의

CREATE OR REPLACE PROCEDURE TEST_PRO
IS 
BEGIN
    DBMS_OUTPUT.PUT_LINE('프로시저 실행1');
END;
/


-- 프로시저 확인
SELECT * FROM ALL_PROCEDURES;   -- 모든 프로시저 확인
SELECT * FROM USER_PROCEDURES;  -- 현재 사용자가 생성한 프로시져 목록 확인
SELECT * FROM USER_SOURCE;  -- 현재 사용자가 생성한 프로시저 상세 코드 확인
SELECT * FROM USER_SOURCE WHERE NAME = 'TEST_PRO';  -- 특정 프로시저의 상세 코드 확인

-- 프로시저 실행
EXECUTE TEST_PRO;
EXEC TEST_PRO;  -- EXECUTE 줄여서 사용 가능

-- 매개변수 있는 프로시져
CREATE OR REPLACE PROCEDURE TEST_PRO2(NUM NUMBER)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('입력값 : ' || NUM);
END;
/

EXEC TEST_PRO2(100);


CREATE OR REPLACE PROCEDURE TEST_PRO3(NAME VARCHAR2)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('입력값 : ' || NAME);
END;
/

EXEC TEST_PRO3('홍길동');
EXEC TEST_PRO3('김길동');  -- 한번만 정의해놓으면 내가 몇번을 불러쓰든 상관없다.


-- 이름을 입력 받은 후 직원테이블에서 이름을 검색해서 이름, 전화번호, 급여 출력
CREATE OR REPLACE PROCEDURE TEST_PRO4(NAME EMPLOYEE.EMP_NAME%TYPE)
IS
    V_NAME EMPLOYEE.EMP_NAME%TYPE;
    TEL EMPLOYEE.PHONE%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_NAME, PHONE, SALARY
        INTO V_NAME, TEL, SAL 
        FROM EMPLOYEE WHERE EMP_NAME = NAME;
    DBMS_OUTPUT.PUT_LINE('이름 : ' || V_NAME);
    DBMS_OUTPUT.PUT_LINE('번호 : ' || TEL);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SAL);
END;
/
SELECT * FROM EMPLOYEE;
EXEC TEST_PRO4('선동일');


-- 반환값이 있는 프로시져
CREATE OR REPLACE PROCEDURE TEST_PRO5(
    V_NAME OUT EMPLOYEE.EMP_NAME%TYPE,
    V_SAL OUT EMPLOYEE.SALARY%TYPE
    )
IS
BEGIN
    SELECT EMP_NAME, SALARY
        INTO V_NAME, V_SAL
        FROM EMPLOYEE
        WHERE EMP_ID = '201';
    DBMS_OUTPUT.PUT_LINE('프로시저5 실행');
    DBMS_OUTPUT.PUT_LINE('이름 : ' || V_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || V_SAL);
END;
/

-- 바인드 변수
    -- 프로시저의 반환 값을 받아줄 변수
    -- VAR[IABLE] <변수명> DATATYPE;
    -- 바인드 변수와 매개변수의 자료형은 반드시 같아야 함
VARIABLE VAR_NAME VARCHAR2(30);
-- 반환될 이름은 달라도 되지만 자료형은 같아야 함
VAR VAR_SAL NUMBER;
EXEC TEST_PRO5(:VAR_NAME, :VAR_SAL); 
-- 입력 해줄 값은 없지만 바인드 변수는 적어줘야 한다, 반환될 값을 저장해 줄 바인드 변수 지정

-- 바인드 변수 값 확인
PRINT VAR_NAME;
PRINT VAR_SAL;

-- 프로시저 실행과 동시에 모든 반인딩 변수의 내용을 출력
SET AUTOPRINT ON;
EXEC TEST_PRO5(:VAR_NAME, :VAR_SAL);


-- 매개변수와 반환값이 모두 있는 프로시저
-- 아이디를 입력받아서 이름, 급여 반환
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE TEST_PRO6(
    V_ID IN EMPLOYEE.EMP_ID%TYPE,
    V_NAME OUT EMPLOYEE.EMP_NAME%TYPE,
    V_SAL OUT EMPLOYEE.SALARY%TYPE
    )
IS
BEGIN
    SELECT EMP_NAME, SALARY 
        INTO V_NAME, V_SAL
        FROM EMPLOYEE
        WHERE EMP_ID = V_ID;
    DBMS_OUTPUT.PUT_LINE('프로시져6 실행');
    DBMS_OUTPUT.PUT_LINE('이름 : ' || V_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || V_SAL);
END;
/

-- 바인드 변수
VARIABLE VAR_NAME VARCHAR2(30);
VAR VAR_SAL NUMBER;
-- 반환될 값을 저장해 줄 바인드 변수 지정
EXEC TEST_PRO6('&사번', :VAR_NAME, :VAR_SAL);  



SELECT * FROM USER_PROCEDURES;
SELECT * FROM USER_SOURCE WHERE NAME = 'TEST_PRO6';

/*  프로시져 삭제
    DROP PROCEDURE <프로시저명>;
*/

DROP PROCEDURE TEST_PRO4;

--------------------------------------------------------------------------

    STORED FUNCTION(저장 함수)
    프로시져와 사용 용도가 거의 비슷함
    실행 결과를 되돌려 받을 수 있음(RETURN 값이 존재하는 객체)

    함수 정의 방법
        CREATE [OR REPLACE] FUNCTION <함수명>(<매개변수명> DATATYPE [,...])
        RETURN DATATYPE;
        IS
            지역변수 선언;
        BEGIN
            실행할 내용;
            RETURN 반환값;
        END;
        /
    함수 실행 방법
        1. EXEC <바인드변수명> := <함수명>(매개변수)
        2. 다른 SQL문 내부에서 <함수명>(매개변수)

--------------------------------------------------------------------------

-- 기본 함수 정의
CREATE OR REPLACE FUNCTION TEST_FUNC1
    RETURN NUMBER
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('함수1');
    RETURN 10;
END;
/

-- 함수 목록 확인
SELECT * FROM USER_PROCEDURES;
-- 함수 상세 코드 확인
SELECT * FROM USER_SOURCE;
-- 바인드 변수
VAR VAR_FUNC NUMBER;
-- 함수 실행1 
EXEC :VAR_FUNC := TEST_FUNC1;
-- VAR_FUNC라는 변수에 함수의 결과값을 담아줄게

-- 함수 실행2
SELECT TEST_FUNC1 FROM DUAL;
-- 다른 쿼리문 안에서 함수를 사용할 수 있다. 바인드변수는 쓰지 않아도 된다. 프로시저에서는 이게 안됨.
-- 프로시저는 매개변수를 이용해서 하나하나 담아줘야 하기 때문에 불가능 (단독으로 사용한다고 생각하면 됨)
-- 함수는 반환값 하나만 된다.


-----------------------------------------------------------------------

   TRIGGER(트리거)
    트리거의 사전적 의미 : 연쇄 반응
    테이블이나 뷰에서 특정 이벤트에 반응해 자동으로 실행되는 내용을 정의
    이벤트 : INSERT, UPDATE, DELETE
    시점 : BEFORE(이벤트 전), AFTER(이벤트 후)
    
    트리거 정의 방법
        CREATE [OR REPLACE] TRIGGER <트리거명> <시점> <이벤트> ON <테이블명|뷰명>
        [FOR EACH ROW]
        BEGIN
            실행할 내용;
        END;
        /
        
    트리거 유형
        문장 트리거 : FOR EACH ROW를 생략하면 문장트리거가 됨
            이벤트 한번 발생 시 실행 내용이 테이블 혹은 뷰 단위로 한번만 실행
            EX) 삭제 이벤트가 한번 발생 시 5개 행이 삭제 된 경우 : 트리거 한번만 실행됨
        행 트리거 : FOR EACH ROW를 정의하면 행트리거가 됨
            이벤트 한번 발생 시 실행 내용이 행단위로 실행
            EX) 삭제 이벤트가 한번 발생 시 5개 행이 삭제 된 경우 : 트리거 5번 실행됨

-----------------------------------------------------------------------

-- 부서 테이블에 부서가 추가되면 '부서가 추가되었습니다.' 메시지 출력
SELECT * FROM DEPT_COPY;
CREATE OR REPLACE TRIGGER TEST_TRG1 AFTER INSERT ON DEPT_COPY
BEGIN
    DBMS_OUTPUT.PUT_LINE('부서가 추가되었습니다');
END;
/

-- 트리거 목록 확인
SELECT * FROM ALL_TRIGGERS; -- 모든 트리거 목록 조회
SELECT * FROM USER_TRIGGERS;    -- 해당 사용자의 트리거 목록 조회
SELECT * FROM USER_SOURCE WHERE NAME = 'TEST_TRG1';  -- 트리거 상세 코드 조회


-- 트리거 실행  
    -- 트리거는 별도로 실행시키는게 아니라 지정된 이벤트가 발생되면 자동으로 실행
INSERT INTO DEPT_COPY VALUES('D10','인사부','L3');

-- 부서 테이블의 DEPT_ID 크기가 CHAR(2) 라서 입력 안될 경우
    SELECT * FROM DEPT_COPY;
    DESC DEPT_COPY;
    ALTER TABLE DEPT_COPY MODIFY DEPT_ID CHAR(3);


-- 부서 테이블의 내용이 삭제 될때 'DETP_TITLE 가 삭제되었습니다.' 출력
-- 문장 트리거
CREATE OR REPLACE TRIGGER TEST_TRG2 BEFORE DELETE ON DEPT_COPY
BEGIN
    DBMS_OUTPUT.PUT_LINE('부서가 삭제되었습니다.');
END;
/
SELECT * FROM DEPT_COPY;
DELETE FROM DEPT_COPY WHERE LOCATION_ID = 'L1';
ROLLBACK;

-- 행 트리거
    -- OLD 연산자 : 이벤트가 일어나기 전 데이터
    -- NEW 연산자 : 이벤트가 일어난 후 데이터
    -- INSERT(NEW), UPDATE(OLD,NEW), DELETE(OLD)
CREATE OR REPLACE TRIGGER TEST_TRG2 BEFORE DELETE ON DEPT_COPY
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:OLD.DEPT_TITLE || '가 삭제되었습니다.');
END;
/

SELECT * FROM USER_SOURCE WHERE NAME='TEST_TRG2';
SELECT * FROM DEPT_COPY;
DELETE FROM DEPT_COPY WHERE LOCATION_ID = 'L1';
ROLLBACK;

-- 데이터 롤백 안될 경우 테이블 삭제하고 다시 생성하기
    DROP TABLE DEPT_COPY;
    CREATE TABLE DEPT_COPY AS SELECT * FROM DEPARTMENT;

-- 트리거 삭제
DROP TRIGGER TEST_TRG1;
