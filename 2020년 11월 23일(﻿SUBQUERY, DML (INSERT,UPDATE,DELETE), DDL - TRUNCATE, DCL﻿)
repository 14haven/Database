2020년 11월 23일



SUBQUERY


SELECT 문장 안에 포함된 또 다른 SELCT 문장으로

메인 쿼리가 실행되기 전 한 번만 실행되며 반드시 괄호로 묶어야 함

서브쿼리와 비교할 항목은 반드시 서브쿼리의 SELECT한 항목의 개수와 자료형을 일치시켜야 함


다중행 서브쿼리

-- 다중행 서브쿼리 앞에는 일반 비교연산자 사용 못함

-- IN : 여러 개의 결과 값 중에 한 개라도 일치하는 값이 있다면 TRUE

-- NOT IN : 여러 개의 결과 값 중에서 한 개라도 일치하는 값이 없다면 FALSE

-- > ANY 혹은 < ANY : 여러개의 결과값 중에 한 개라도 큰/작은 경우 TRUE

-- 가장 작은 값 보다 큰지? (비교해서 하나라도 큰 값이 있는가?)

-- 혹은 가장 큰 값보다 작은지? (비교해서 하나라도 작은 값이 있는가?)

-- > ALL 혹은 < ALL : 모든 값 보다 큰/ 작은 경우 TRUE (>= , <= 사용 가능)

-- 가장 큰 값 보다 큰지? 혹은 가장 작은 값보다 작은지?

-- EXISTS / NOT EXISTS : 값이 존재하는지? 존재하지 않는지?


-- 부서별 최고 급여를 받는 직원의 이름, 직급, 부서, 급여 조회

SELECT DEPT_CODE, MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE;

SELECT EMP_NAME, JOB_CODE, DEPT_CODE,SALARY FROM EMPLOYEE

WHERE SALARY IN (SELECT MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE);


-- 대리 직급의 직원들 중에서 과장 직급의 최소 급여보다 많이 받는 직원의 사번, 이름, 직급, 급여 조회

SELECT * FROM SAL_GRADE;

SELECT * FROM JOB;

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE

JOIN JOB USING (JOB_CODE)

WHERE JOB_NAME = '대리' ;


SELECT SALARY FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME = '과장';


SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE

JOIN JOB USING (JOB_CODE)

WHERE JOB_NAME = '대리' AND SALARY >

ANY (SELECT SALARY FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME = '과장');


-- 차장 직급의 급여의 가장 큰 값보다 많이 받는 과장 직급의 직원 조회

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY FROM EMPLOYEE

JOIN JOB USING (JOB_CODE)

WHERE JOB_NAME = '과장' AND SALARY >

ALL (SELECT SALARY FROM EMPLOYEE JOIN JOB USING(JOB_CODE) WHERE JOB_NAME = '차장');


다중열 서브쿼리

-- 퇴사한 여직원과 같은 부서, 같은 직급에 해당하는 사원의 이름, 직급, 부서, 입사일 조회

SELECT * FROM EMPLOYEE;

-- 퇴사한 여직원의 부서, 직급코드를 조회

SELECT EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE

WHERE SUBSTR(EMP_NO,8,1)=2 AND ENT_YN = 'Y';


-- 단일열/단일행으로 조회

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, HIRE_DATE FROM EMPLOYEE

WHERE DEPT_CODE=(SELECT DEPT_CODE FROM EMPLOYEE WHERE SUBSTR(EMP_NO,8,1)=2 AND ENT_YN = 'Y')

AND JOB_CODE = (SELECT JOB_CODE FROM EMPLOYEE WHERE SUBSTR(EMP_NO, 8,1) =2 AND ENT_YN = 'Y')

AND EMP_NAME <> (SELECT EMP_NAME FROM EMPLOYEE WHERE SUBSTR(EMP_NO, 8,1) =2 AND ENT_YN = 'Y');


-- 다중열

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, HIRE_DATE FROM EMPLOYEE

WHERE (DEPT_CODE, JOB_CODE) IN

(SELECT DEPT_CODE, JOB_CODE FROM EMPLOYEE WHERE SUBSTR(EMP_NO,8,1)=2 AND ENT_YN = 'Y')

AND EMP_NAME <> (SELECT EMP_NAME FROM EMPLOYEE WHERE SUBSTR(EMP_NO, 8,1) =2 AND ENT_YN = 'Y');


다중열/다중행 서브쿼리

-- 직급별 최소 급여를 받는 직원의 사번, 이름, 직급, 급여 조회

SELECT JOB_CODE, MIN(SALARY) FROM EMPLOYEE GROUP BY JOB_CODE;


SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY FROM EMPLOYEE

WHERE (JOB_CODE, SALARY) IN (SELECT JOB_CODE, MIN(SALARY) FROM EMPLOYEE GROUP BY JOB_CODE);



인라인 뷰(INLINE VIEW) : 서브쿼리가 만든 결과 집합(RESULT SET)에 대한 추가 조회

-- FROM 절에서 서브쿼리를 사용 : 테이블 대신 사용

-- ROWNUM : 행번호를 의미함

-- ROWNUM : 자체가 FROM 절에서 붙여짐


-- ORDER BY 한 다음에 ROWNUM이 붙으려면 서브쿼리(인라인뷰)를 이용해야 함

-- 급여를 조회하고 싶은데 위에서부터 5개만 자르고 싶어

SELECT * FROM EMPLOYEE ORDER BY SALARY DESC;

-- ROWNUM을 이용해서 행번호 조회

SELECT ROWNUM, EMP_NAME, EMP_NO FROM EMPLOYEE;

-- 행번호를 이용해 순서대로 데이터 잘라오기

SELECT ROWNUM, EMP_NAME, EMP_NO FROM EMPLOYEE WHERE ROWNUM <= 5;


-- 주민번호 순으로 정렬

SELECT ROWNUM, EMP_NAME, EMP_NO FROM EMPLOYEE ORDER BY EMP_NO;

-- 주민번호 순으로 정렬해서 주민번호가 빠른 순서대로 5개 자르고 싶음

-- 안됨

SELECT ROWNUM, EMP_NAME, EMP_NO FROM EMPLOYEE WHERE ROWNUM <= 5 ORDER BY EMP_NO;

-- ROWNUM <= 5 이먼저 실행되고 ORDER BY EMP_NO이 실행됨, 빠른 순서대로 자를 수가 없음

-- 정렬먼저 하고 ROWNUM <=5 실행하고 싶다면

SELECT ROWNUM, EMP_NAME, EMP_NO FROM (SELECT * FROM EMPLOYEE ORDER BY EMP_NO);

SELECT ROWNUM, EMP_NAME, EMP_NO FROM (SELECT * FROM EMPLOYEE ORDER BY EMP_NO)

WHERE ROWNUM <= 5;


-- 급여 높은 사원 5명

SELECT ROWNUM, EMP_NAME, SALARY FROM (SELECT * FROM EMPLOYEE ORDER BY SALARY DESC)

WHERE ROWNUM <= 5;




DML (INSERT,UPDATE,DELETE)


----------------------------------------------------------------


INSERT

테이블에 새로운 행을 추가하여 테이블의 행 개수를 증가시키는 구문

테이블에 데이터를 삽입(추가) 하는 구문


1. 테이블의 모든 컬럼에 대한 값을 INSERT 할 때 사용

INSERT INTO 테이블명 VALUES(데이터1, 데이터2,...);

테이블의 컬럼이 만들어져있는 순서대로 데이터를 입력 해 줘야 함

2. 테이블의 특정 컬럼에 대한 값을 INSERT 할 때

INSERT INTO 테이블명(컬럼명1, 컬럼명2, ...) VALUES(데이터1, 데이터2, ...);

테이블명 뒤에 나열한 컬럼의 순서대로 데이터를 입력 해 줘야 함


----------------------------------------------------------------


DESC EMPLOYEE;

-- 모든 컬럼에 데이터 입력

SELECT * FROM EMPLOYEE;

INSERT INTO EMPLOYEE VALUES('900','장채현','901123-1080503','jang_ch@kh.or.kr',

'01055569512','D1','J7','S3',4300000,0.5,'200',SYSDATE,NULL,DEFAULT);


-- 특정 컬럼에 데이터 입력

INSERT INTO EMPLOYEE(EMP_ID,EMP_NAME,EMP_NO,JOB_CODE,SAL_LEVEL)

VALUES('901','홍길동','981205-1587456','J5','S1');


-- 서브쿼리를 이용해 데이터 삽입

-- VALUES로 값을 직접 입력하는 대신 다른 테이블에서 조회한 데이터를 삽입


-- 테이블 생성

CREATE TABLE EMP_01(

EMP_ID NUMBER,

EMP_NAME VARCHAR2(30),

DEPT_TITLE VARCHAR2(20)

);


SELECT * FROM EMP_01;


-- EMPLOYEE 테이블에서 조회한 데이터를 EMP_01 테이블에 삽입

INSERT INTO EMP_01(

SELECT EMP_ID,EMP_NAME, DEPT_TITLE FROM EMPLOYEE

LEFT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)

);


----------------------------------------------------------------


INSERT ALL

INSERT 시 사용되는 서브쿼리의 테이블이 같은 경우,

두 개 이상의 테이블에 INSERT ALL을 이용하여 한번에 삽입


----------------------------------------------------------------


테이블 2개 생성

CREATE TABLE EMP_DEPT_01

AS SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE FROM EMPLOYEE WHERE 1=0;

-- WHERE 1=0 -> 무조건 FALSE, 컬럼만(이름,데이터형,제약조건등) 복사해오고 데이터는 안가져온다.

DESC EMP_DEPT_01;


CREATE TABLE EMP_MANAGE

AS SELECT EMP_ID, EMP_NAME, MANAGER_ID FROM EMPLOYEE WHERE 1=0;

SELECT * FROM EMP_MANAGE;


-같은 테이블에서 조건을 같게해서 조회한 데이터를 각각의 다른 테이블에 삽입

-- EMP_DEPT_01 테이블에 EMPLOYEE 테이블에 있는 부서코드가 D1인 직원을 조회해서 삽입

-- (사번, 이름, 부서코드, 입사일)

-- EMP_MANAGE 테이블에 EMPLOYEE 테이블에 있는 부서코드가 D1인 직원을 조회해서 삽입

-- (사번, 이름, 관리자사번)


-- 기존방식

INSERT INTO EMP_DEPT_01 (

SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE FROM EMPLOYEE

WHERE DEPT_CODE = 'D1'

);

INSERT INTO EMP_MANAGE(

SELECT EMP_ID, EMP_NAME, MANAGER_ID FROM EMPLOYEE

WHERE DEPT_CODE = 'D1'

);

SELECT * FROM EMP_DEPT_01;

SELECT * FROM EMP_MANAGE;

DELETE FROM EMP_DEPT_01;

DELETE FROM EMP_MANAGE;


-- INSERT ALL 사용

INSERT ALL

INTO EMP_DEPT_01 VALUES(EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE)

INTO EMP_MANAGE VALUES(EMP_ID, EMP_NAME, MANAGER_ID)

SELECT EMP_ID,EMP_NAME, DEPT_CODE, HIRE_DATE, MANAGER_ID FROM EMPLOYEE

WHERE DEPT_CODE = 'D1';

SELECT * FROM EMP_DEPT_01;

SELECT * FROM EMP_MANAGE;


같은 테이블에서 조건을 다르게 해서 조회한 데이터를 각각의 다른 테이블에 삽입

-- EMPLOYEE 테이블에서 입사일 기준으로 2010년 1월1일 이전 입사한 사원의

-- 사번, 이름, 입사일, 급여를 조회해서 EMP_OLD 테이블에 삽입

-- 그 이후 입사한 사원의 정보는 EMP_NEW 테이블에 삽입


-- 테이블 생성

CREATE TABLE EMP_OLD AS

SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEE WHERE 1=0;

CREATE TABLE EMP_NEW AS

SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEE WHERE 1=0;

SELECT * FROM EMP_OLD;

SELECT * FROM EMP_NEW;


-- 데이터 삽입

INSERT ALL

WHEN HIRE_DATE < '2010/01/01' THEN

INTO EMP_OLD VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)

WHEN HIRE_DATE >= '2010/01/01' THEN

INTO EMP_NEW VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)

SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEE;

SELECT * FROM EMP_OLD;

SELECT * FROM EMP_NEW;


----------------------------------------------------------------


UPDATE

테이블에 기록된 컬럼 값을 수정하는 구문


표현식 : UPDATE 테이블명 SET 컬럼명=바꿀값 [WHERE 조건]

조건을 지정하지 않으면 해당 컬럼의 모든 행의 값을 변경


----------------------------------------------------------------


-- 부서 테이블 복사본 테이블 생성

CREATE TABLE DEPT_COPY AS SELECT * FROM DEPARTMENT;

SELECT * FROM DEPT_COPY;


-- 부서코드가 'D9'인 부서명을 '전략기획팀'으로 변경

UPDATE DEPT_COPY SET DEPT_TITLE='전략기획팀' WHERE DEPT_ID='D9';

SELECT * FROM DEPT_COPY;


-- 조건을 안주면 해당 컬럼의 전체 행 데이터가 변경됨

UPDATE DEPT_COPY SET DEPT_TITLE='총무팀';

ROLLBACK;


-- UPDATE 시에도 서브쿼리 사용 가능

-- UPDATE 테이블명 SET 컬럼명 = (서브쿼리) [WHERE 조건];

CREATE TABLE EMP_SALARY AS

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY, BONUS FROM EMPLOYEE;


SELECT * FROM EMP_SALARY;


-- 유재식의 급여와 보너스를 조회해와서 방명수의 급여와 보너스에 삽입

UPDATE EMP_SALARY SET

SALARY = (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME='유재식'),

BONUS = (SELECT BONUS FROM EMPLOYEE WHERE EMP_NAME='유재식')

WHERE EMP_NAME='방명수';


-- 다중행 다중열 서브쿼리를 이용한 UPDATE문

UPDATE EMP_SALARY SET

(SALARY,BONUS) = (SELECT SALARY,BONUS FROM EMPLOYEE WHERE EMP_NAME='유재식')

WHERE EMP_NAME IN ('노옹철','전형돈','정중하','하동운');


SELECT * FROM EMP_SALARY

WHERE EMP_NAME IN ('유재식','방명수','노옹철','전형돈','정중하','하동운');


-- EMP_SALARY 테이블에서 아시아지역에 근무하는 직원의 보너스를 0.5로 변경

SELECT EMP_ID FROM EMPLOYEE

JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)

JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)

WHERE LOCAL_NAME LIKE 'ASIA%';


UPDATE EMP_SALARY SET BONUS = 0.5

WHERE EMP_ID IN (SELECT EMP_ID FROM EMPLOYEE

JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)

JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)

WHERE LOCAL_NAME LIKE 'ASIA%');

SELECT * FROM EMP_SALARY;


-- UPDATE 시 변경할 값은 해당 컬럼의 제약조건에 위배되지 않아야 함

DESC EMPLOYEE;

UPDATE EMPLOYEE SET EMP_NAME = NULL WHERE EMP_ID=200;


----------------------------------------------------------------


DELETE

테이블의 행을 삭제하는 구문

표현식 : DELETE FROM 테이블명 [WHERE 조건];

만약 WHERE 조건을 설정하지 않으면 모든 행이 다 삭제됨


----------------------------------------------------------------


COMMIT;

SELECT * FROM EMPLOYEE;


DELETE FROM EMPLOYEE WHERE EMP_NAME = '장채현';


DELETE FROM EMPLOYEE;


ROLLBACK;


-- FOREIGN KEY (외래키) 제약조건이 설정되어 있는 경우 삭제

-- 제약조건 확인

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='EMPLOYEE';

SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME='EMPLOYEE';

-- EMPLOYEE 테이블의 DEPT_CODE 컬럼에 외래키 설정(부모 : DEPARTMNET 테이블 DEPT_ID)

ALTER TABLE EMPLOYEE ADD /*CONSTRAINT '제약조건명'*/

FOREIGN KEY(DEPT_CODE) REFERENCES DEPARTMENT/*(참조컬럼명)*/;

-- 제약조건명 써줄거면 ADD CONSTRAINT, 자동으로 이름 생성되게 하려면 ADD만 쓴다


-- 외래키로 참조되고 있는 값에 대해서는 삭제 불가능

SELECT * FROM EMPLOYEE;

SELECT * FROM DEPARTMENT;

DELETE FROM DEPARTMENT WHERE DEPT_ID = 'D1';


-- 외래키 설정되어 있더라도 현재 참조되고 있지 않은 값에 대해서는 삭제 가능

DELETE FROM DEPARTMENT WHERE DEPT_ID = 'D3';


ROLLBACK;


-- 삭제 시 외래키 제약조건으로 삭제가 불가능한 경우 임시로 제약조건을 비활성화 할 수 있음

-- 제약조건 확인

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'EMPLOYEE';

ALTER TABLE EMPLOYEE DISABLE CONSTRAINT SYS_C007056 CASCADE;


DELETE FROM DEPARTMENT WHERE DEPT_ID = 'D1';

SELECT * FROM DEPARTMENT;

ROLLBACK;


ALTER TABLE EMPLOYEE ENABLE CONSTRAINT SYS_C007056;


----------------------------------------------------------------


MERGE

구조가 같은 두 개의 테이블을 하나의 테이블로 합치는 기능 제공

두 테이블에서 지정하는 조건의 값이 존재하면 UPDATE되고, 조건 값이 없으면 INSERT 됨


----------------------------------------------------------------


CREATE TABLE EMP_M01 AS SELECT * FROM EMPLOYEE;

CREATE TABLE EMP_M02 AS SELECT * FROM EMPLOYEE WHERE JOB_CODE = 'J4';


SELECT * FROM EMP_M01;

SELECT * FROM EMP_M02;


INSERT INTO EMP_M02 VALUES('999','곽두원','561015-1234567','kwack_dw@kh.or.kr',

'01011112222','D9','J4','S1',9000000,0.5,NULL,

SYSDATE, NULL,DEFAULT);

UPDATE EMP_M02 SET SALARY = 0;

SELECT * FROM EMPLOYEE;

MERGE INTO EMP_M01 USING EMP_M02 ON (EMP_M01.EMP_ID = EMP_M02.EMP_ID)

WHEN MATCHED THEN

UPDATE SET

EMP_M01.EMP_NAME = EMP_M02.EMP_NAME,

EMP_M01.EMP_NO = EMP_M02.EMP_NO,

EMP_M01.EMAIL = EMP_M02.EMAIL,

EMP_M01.PHONE = EMP_M02.PHONE,

EMP_M01.DEPT_CODE = EMP_M02.DEPT_CODE,

EMP_M01.JOB_CODE = EMP_M02.JOB_CODE,

EMP_M01.SAL_LEVEL = EMP_M02.SAL_LEVEL,

EMP_M01.SALARY = EMP_M02.SALARY,

EMP_M01.BONUS = EMP_M02.BONUS,

EMP_M01.MANAGER_ID = EMP_M02.MANAGER_ID,

EMP_M01.HIRE_DATE = EMP_M02.HIRE_DATE,

EMP_M01.ENT_DATE = EMP_M02.ENT_DATE,

EMP_M01.ENT_YN = EMP_M02.ENT_YN

WHEN NOT MATCHED THEN -- 없었던 데이터에 대해서는 추가 EX) 곽두원

INSERT VALUES (EMP_M02.EMP_ID,EMP_M02.EMP_NAME, EMP_M02.EMP_NO,EMP_M02.EMAIL,EMP_M02.PHONE,EMP_M02.DEPT_CODE,

EMP_M02.JOB_CODE,EMP_M02.SAL_LEVEL,EMP_M02.SALARY,EMP_M02.BONUS,EMP_M02.MANAGER_ID,

EMP_M02.HIRE_DATE,EMP_M02.ENT_DATE,EMP_M02.ENT_YN);


----------------------------------------------------------------


DDL - TRUNCATE(초기화)

테이블 전체 행 삭제 시 사용하며 DELETE보다 수행 속도가 빠름

테이블을 완전히 삭제했다가 다시 생성해줌

DDL 이기 때문에 ROLLBACK으로 복구 불가능


----------------------------------------------------------------


SELECT * FROM EMP_SALARY;

COMMIT;


DELETE FROM EMP_SALARY; -- 모든 데이터 삭제

SELECT * FROM EMP_SALARY; -- 데이터 없음

ROLLBACK;

SELECT * FROM EMP_SALARY; -- 데이터 원복됨


TRUNCATE TABLE EMP_SALARY; -- 테이블 초기화

ROLLBACK;

SELECT * FROM EMP_SALARY; -- 데이터 없음





DCL

--------------------------------------------------------------------


DCL (DATA CONTROL LANGUAGE)

DB에 대한 보안, 무결성, 복구 등 DBMS를 제어하기 위한 언어

사용자의 권한이나, 관리자 설정등을 처리

GRANT(유저 권한 생성), REVOKE(유저 권한 삭제)

트랜잭션에 관련된 언어(TCL)

COMMIT(실행), ROLLBACK(복구)


--------------------------------------------------------------------


계정관리

데이터 베이스를 사용하기 위한 계정

데이터 베이스에 접근하기 위해서는 해당 사용자로 로그인해서 사용해야 함


데이터베이스의 관리자 계정

데이터베이스의 생성과 관리를 담당하는 계정

모든 권한과 책임을 가지는 계정

데이터베이스의 사용자 계정

데이터베이스에 대하여 질의, 갱신, 보고서 작성 등의 작업을 수행할 수 있는 계정

업무에 필요한 최소한의 권한만을 가지는 것을 원칙으로 함


--------------------------------------------------------------------


-- 데이터베이스 내 생성된 계정 확인

SELECT * FROM DBA_USERS;


-- 현재 접속 계정 확인

SHOW USER


-- 계정 관리, 계정도 하나의 객체이다

-- 계정 생성

CREATE USER <USER_NAME>

[ -- 옵션 --

IDENTIFIED BY <PASSWORD> : 해당 유저의 비밀번호를 설정하는 옵션

DEFAULT TABLESPACE <TABLESPACE_NAME> : 테이블들을 저장하기 위한 공간, 테이블을 만들 때 어떤 테이블스페이스 안에 만들어줄건지

TEMPORARY TABLESPACE <TEMP_TABLESPACE_NAME> : 임시로 저장할 테이블스페이스

QUOTA <SIZE | UNLIMITIED> ON <TABLESPACE_NAME> : 특정 테이블스페이스에서 사용할 수 있는 용량을 지정할 수 있음, 무제한은 UNLIMITIED

PROFILE <PROFILE | DEFAULT> : 계정 템플릿(규칙에 따라 생성해라), 없으면 디폴트

PASSWORD EXPIRE : 최초 접속시 password 재설정

ACCOUNT <LOCK | UNLOCK> : 계정에 대한 lock 상태, 디폴트는 언락

];


-- KUSER 라는 이름의 계정을 생성하면서 비밀번호를 KUSERPASS 로 설정하고 계정 잠금상태로 생성

CREATE USER KUSER IDENTIFIED BY KUSERPASS ACCOUNT LOCK;


-- 계정 조회

SELECT * FROM DBA_USERS;


-- 접속 테스트(GUI로 해도됨) : 계정이 잠겨있어서 접속 안됨

CONNECT KUSER/KUSERPASS;


-- 계정 수정

ALTER USER <USERNAME>

[ -- 옵션 --

IDENTIFIED BY <PASSWORD>

DEFAULT TABLESPACE <TABLESPACE_NAME>

TEMPORARY TABLESPACE <TEMP_TABLESPACE_NAME>

QUOTA <SIZE | UNLIMITIED> ON <TABLESPACE_NAME>

ACCOUNT <LOCK | UNLOCK>

];


-- 계정 잠금 해제

ALTER USER KUSER ACCOUNT UNLOCK;

SELECT * FROM DBA_USERS;


-- 접속테스트 : LOCK은 풀렸지만 접속권한이 없어서 접속 안됨

CONNECT KUSER/KUSERPASS;


-- 계정 비밀번호 변경

ALTER USER KUSER IDENTIFIED BY KPASS;


-- 접속테스트 : 비밀번호 틀려서 접속 안됨

CONNECT KUSER/KUSERPASS;

-- 접속테스트 : 비밀번호는 맞지만 접속권한이 없어서 접속 안됨

CONNECT KUSER/KPASS;


-- 계정 삭제

DROP USER <USERNAME> [CASCADE];

CASCADE : 계정과 관련된 모든 데이터베이스 스키마 데이터사전으로 부터 삭제되고

모든 스키마 객체도 물리적으로 삭제


-- KUSER 계정을 삭제

DROP USER KUSER CASCADE;

SELECT * FROM DBA_USERS;




권한 관리

사용자가 특정 테이블에 접근할 수 있도록 하거나,

해당 테이블에 SQL문을 사용할 수 있도록 제한을 두는 것

사용자가 데이터베이스의 객체(테이블,뷰 등)에 대한 특정 권한을 가질 수 있게 함 (테이블 생성하거나 삭제하거나 수정하거나)

다수의 사용자가 공유하는 데이터베이스 정보에 대한 보안 설정함

데이터베이스 접근하는 사용자마다 서로 다른 권한과 롤을 부여함 (역할게 맞게)


- 시스템 권한

시스템 전반적인 구조를 위한, DBMS의 구조를 정의하기 위한 권한

데이터베이스 접속 사용자 생성 및 오브젝트 생성 등의 권한

데이터베이스 관리자가 가지고 있는 권한 DDL

CREATE USER (사용자 계정 만들기)

DROP USER(사용자 계정 삭제)

DROP ANY TABLE(임의의 테이블 삭제)

QUERY REWRITE(함수 기반 인덱스 생성 권한)

BACKUP ANY TABLE(테이블 백업)


시스템 관리자가 사용자에게 부여하는 권한

CREATE SESSION(데이터베이스에 접속)

CREATE TABLE(테이블 생성)

CREATE VIEW(뷰 생성)

CREATE SEQENCE(시퀀스 생성)

CREATE PROCEDURE(프로시저 생성)

(관리자가 사용자한테 야 너 접속하게 해줄게,

테이블좀 생성해라, 뷰좀 생성해라, 시퀀스좀 생성해라, 프로시저좀 생성해라, 객체 생성 권한)


- 오브젝트 권한

특정 객체에 할당되는 권한(따로따로 설정되는 권한)

EX) EMPLOYEE라는 테이블을 수정할 수 있는 권한

특정 오브젝트(즉 테이블,뷰,시퀀스,프로시져)에 대한 작업을 하기 위한 권한

예) 만들어져있는 테이블을 수정하거나, 데이터를 삽입하거나




-- 권한 실습을 위한 계정 생성

CREATE USER KUSER IDENTIFIED BY KUSER;


-- 계정조회

SELECT * FROM DBA_USERS;


-- 접속시도 : 접속 권한 없음

CONNECT KUSER/KUSER;


-- 시스템 권한 부여

-- GRANT <권한, ....> TO <USERNAME>;

GRANT CREATE SESSION TO KUSER;

-- 접속시도 : 접속됨

CONNECT KUSER/KUSER;


-- 오브젝트 권한 부여

-- GRANT <권한, ...> ON <OBJECT> TO <USERNAME>;

GRANT SELECT ON KH.EMPLOYEE TO KUSER;

-- KUSER 계정으로 KH.EMPLOYEE 조회 시도 : 조회 잘됨

-- SELECT * FROM KH.EMPLOYEE;


/* 권한 확인 */

-- 사용자에게 부여된 시스템 권한 확인 (관리자)

SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = 'KUSER';

-- 사용자에게 부여된 오브젝트 권한 확인

SELECT * FROM DBA_TAB_PRIVS WHERE GRANTEE = 'KUSER';


-- 현재 접속 계정 시스템 권한 확인

SELECT * FROM SESSION_PRIVS;


-- 현재 접속 계정 오브젝트 권한 확인

SELECT * FROM USER_TAB_PRIVS_RECD; -- RECEIVED 사용자에게 부여된 권한


-- 오브젝트 권한 제거

--REVOKE < 권한, ...> ON <OBJECT_NAME> FROM <USERNAME>;

REVOKE SELECT ON KH.EMPLOYEE FROM KUSER;


-- 시스템 권한 제거

-- REVOKE <권한, ...> FROM <USERNAME>;

REVOKE CREATE SESSION FROM KUSER;

CONNECT KUSER/KSUSER;

