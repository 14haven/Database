2020년 11월 20일

DDL - 데이터 정의어 DBMS의 구조를 정의하기 위한 언어
CREATE, ALTER, DROP, TRUNCATE
DML - 데이터 조작어, 실제 만들어져있는 데이터구조 안에 데이터를 삽입,수정,삭제,조회(DQL)
INSERT, UPDATE, DELETE, SELECT
DCL - 데이터 제어어, DBMS의 계정에 대한 권한이나 DBMS에 대한 실행, 보안에 대한 부분
GRANT, REVOKE, COMMIT, ROLLBACK 
DQL 
TCL - COMMIT, ROLLBACK

---------------------------------------------------------------------------------------

SELECT 고급

-----------------------------------------------------
/*  ORDER BY
    테이블 내 조회된 데이터를 지정된 컬럼을 기준으로 정렬
    SELECT 구문의 가장 마지막에 작성하며, 실행 순서역시 가장 마지막에 수행된다.
    
    표현식 : ORDER BY<컬럼명|별칭|컬럼순번> [정렬방식][NULLS FRIST|LAST]
        정렬방식 : ASC(기본값) - 오름차순, DESC - 내림차순 
        NULLS : NULL 값을 가장 작은 값으로 정렬할지, 가장 큰값으로 정렬할지 순서 지정
            FIRST : 가장 작은 값으로 인식
            LAST(기본값) : 가장 큰 값으로 인식
*/
-----------------------------------------------------
-- 그냥 조회 : 직원 테이블에서 사원번호,이름,부서코드,직급코드를 조회
SELECT EMP_ID,EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE;
-- 부서코드를 기준으로 정렬 (기본 오름차순)
SELECT EMP_ID,EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE
    ORDER BY DEPT_CODE; -- ASC 생략 가능;
-- 부서코드를 기준으로 내림차순 정렬
SELECT EMP_ID,EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE
    ORDER BY DEPT_CODE DESC;
-- 부서코드를 기준으로 정렬 후 직급코드를 기준으로 추가 정렬
SELECT EMP_ID,EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE
    ORDER BY DEPT_CODE,JOB_CODE;
-- 별칭으로 정렬
SELECT EMP_ID 사원번호,EMP_NAME 이름, DEPT_CODE 부서코드, JOB_CODE 직급코드
    FROM EMPLOYEE ORDER BY 이름;
-- 컬럼 순번으로 정렬
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE
    ORDER BY 3;
-- EMP_ID가 1번, EMP_NAME이 2번, DEPT_CODE가 3번, JOB_CODE가 4번;

-- NULL 값을 가장 처음으로 정렬(기본값은 가장 마지막에 정렬 - LAST)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE FROM EMPLOYEE
    ORDER BY DEPT_CODE NULLS FIRST;
    
-----------------------------------------------------------------------
/* GROUP BY
    지정된 컬럼을 기준으로 데이터를 그룹핑
    그룹함수는 단 한개의 결과 값만 산출하기 때문에 그룹이 여러 개인 경우 오류 발생
        여러 개의 결과 값을 산출하기 위해 그룹함수가 적용될 그룹을 GROUP BY절에 기술하여 사용
    여러개의 값을 묶어서 하나로 처리할 목적으로 사용함
    표현식 : GROUP BY <그룹을 묶을 컬럼명>
*/
-----------------------------------------------------------------------
-- 직원의 총 급여
SELECT SUM(SALARY) FROM EMPLOYEE;
-- 각 부서별 직원의 총 급여
    -- 부서 코드를 기준으로 그룹 묶어서 각 그룹의 급여 합계 조회
SELECT DEPT_CODE, SUM(SALARY) FROM EMPLOYEE;    -- 에러 발생
SELECT DEPT_CODE, SUM(SALARY) FROM EMPLOYEE 
    GROUP BY DEPT_CODE ORDER BY DEPT_CODE;
-- 부서별 총 급여와 평균 급여 조회
SELECT DEPT_CODE, SUM(SALARY) 총급여, AVG(SALARY) 평균급여 FROM EMPLOYEE
    GROUP BY DEPT_CODE ORDER BY DEPT_CODE;
-- 부서별 사원수 조회
SELECT DEPT_CODE 부서코드, COUNT(*) 사원수 FROM EMPLOYEE
    GROUP BY DEPT_CODE;
    
---------------------------------------------------------------
/* HAVING
    그룹함수로 값을 구해올 그룹에 대해 조건을 설정 할 때 사용
    (WHERE 절은 SELECT에 대한 조건)
    표현법 : HAVING < 컬럼명|그룹함수식> 비교연산자 비교값
*/
---------------------------------------------------------------
-- 부서별 급여 합계 중 1000만원 이상인 부서만 조회
SELECT DEPT_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY DEPT_CODE HAVING SUM(SALARY) >= 10000000;
    
/*  SELECT 문 수행 순서 
    5 : SELECT 컬럼명
    1 : FROM 테이블명
    2 : WHERE 조건
    3 : GROUP BY 그룹 묶을 컬럼명
    4 : HAVING 그룹에 대한 조건
    6 : ORDER BY 정렬할 기준 컬럼명
*/

---------------------------------------------------------------
/*  집계함수
    GROUP BY 절에서만 사용하는 함수
    그룹별 산출한 결과 값의 집계를 계산하는 함수
    -- ROLLUP 함수 : 그룹별로 중간 집계 처리를 하는 함수
        -- 그룹별로 묶여진 값에 대한 중간 집계와 총 집계를 구할 때 사용
        -- 그룹함수로 계산된 결과값들에 대한 총 집계가 자동으로 추가됨
    -- CUBE 함수 : 그룹별 산출한 결과를 집계하는 함수
        -- 인자로 지정된 그룹들로 가능한 모든 조합 별로 집계한 결과를 반환
*/
---------------------------------------------------------------
-- 직급코드별로 급여 합계 금액을 조회
SELECT JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY JOB_CODE ORDER BY 1;
    
-- 직급코드별로 급여 합계 금액을 조회하고 마지막에 총 합계 조회
SELECT JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY ROLLUP(JOB_CODE)ORDER BY 1;

SELECT JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY CUBE(JOB_CODE)ORDER BY 1;

SELECT SUM(SALARY) FROM EMPLOYEE;   -- 총 합계값 조회해보기 

-- 직급코드별로 급여 평균 금액을 조회하고 마지막에 전체 평균 조회
SELECT JOB_CODE, AVG(SALARY) FROM EMPLOYEE
    GROUP BY ROLLUP(JOB_CODE) ORDER BY 1;
SELECT JOB_CODE, AVG(SALARY) FROM EMPLOYEE
    GROUP BY CUBE(JOB_CODE) ORDER BY 1;
SELECT AVG(SALARY) FROM EMPLOYEE;

-- 각 부서 내 직급 별로 그룹 지정해서 급여 조회
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY DEPT_CODE, JOB_CODE ORDER BY 1;
-- D코드 안에 있는 J 코드
    
-- 각 직급 내 부서 별로 그룹 지정
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY JOB_CODE, DEPT_CODE ORDER BY 2;
-- J코드 안에 있는 D 코드
    
-- 각 부서 내 직급 별로 그룹 지정해서 급여 조회하고 부서의 총 급여, 전체 총 급여도 같이 조회
    -- 부서코드+직급코드 급여 합계 (GROUP BY)
    -- 부서코드에 대한 급여 합계 (ROLL UP)
    -- 총 급여 합계에 대한 집계 결과 반환 (ROLL UP)
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY ROLLUP(DEPT_CODE, JOB_CODE) ORDER BY 1;    

-- 인자로 지정된 그룹들로 가능한 모든 조합 별 집계 결과를 반환
    -- 부서코드+직급코드에 대한 급여 합계
    -- 부서코드에 대한 급여 합계
    -- 직급코드에 대한 급여 합계
    -- 총 급여 합계
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) FROM EMPLOYEE
    GROUP BY CUBE(DEPT_CODE, JOB_CODE) ORDER BY 1;        

-- GROUPING 함수
    -- 각 레코드(ROW)가 결과 집합에 의해(GROUP BY에 의해) 조회된 인지, 
    -- ROLLUP이나 CUBE에 의해서 산출된 데이터인지 구분하는 함수
    -- 인자로 전달받은 컬럼의 집계 산출물이면 1, 아니면 0을 반환
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY), 
    GROUPING(DEPT_CODE) 부서별묶인상태,
    GROUPING(JOB_CODE) 직급별묶인상태
    FROM EMPLOYEE
    GROUP BY CUBE(DEPT_CODE, JOB_CODE) ORDER BY 1;
    
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY), 
    CASE WHEN GROUPING(DEPT_CODE) = 0 AND GROUPING(JOB_CODE) =1
        THEN '부서별 총합'
        WHEN GROUPING(DEPT_CODE) = 1 AND GROUPING(JOB_CODE) = 0
        THEN '직급별 총합'
        WHEN GROUPING(DEPT_CODE) = 0 AND GROUPING(JOB_CODE) = 0
        THEN '그룹별 총합'
        ELSE '총합계'
    END AS 구분 FROM EMPLOYEE GROUP BY CUBE(DEPT_CODE, JOB_CODE) ORDER BY 1;
    
--------------------------------------------------------
/* 집합연산자 (SET OPERATOR)
    여러 개의 SELECT 결과물을 하나의 쿼리로 만드는 연산자
    UNION : 여러 개의 쿼리 결과를 합치는 연산자로 중복된 영역은 제외하여 합침
    UNION ALL : 여러 개의 쿼리 결과를 합치는 연산자로 중복된 영역 모두 포함하여 합쳐준다.
    INTERSECT : 여러 개의 쿼리 결과에서 공통된 부분만 결과로 추출(교집합)
    MINUS : 선행 SELECT 결과에서 다음 SELECT 결과와 겹치는 부분을 제외한 나머지 부분 추출(차집합)

    조건 :
    1. 선행 SELECT에서 조회할 컬럼 컬럼 개수와 다음 SELECT에서 조회할 컬럼 개수가 반드시 일치해야 함
    2. 선행 SELECT에서 조회할 컬럼 데이터 타입과 
            다음 SELECT에서 조회할 컬럼 데이터 타입이 반드시 일치해야 함
*/
--------------------------------------------------------
DESC EMPLOYEE;
-- UNION
-- 직원테이블 조회된 결과 아래부분에 두번째 SELECT 문에서 조회한 결과 출력 결과 같이 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
UNION
SELECT 'A','B','C',10 FROM DUAL;

-- 직원테이블에서 조회된 결과와 중복된 값은 제외됨
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
UNION
SELECT '200','선동일','D9',8000000 FROM DUAL;

-- 직원테이블에서 조회된 결과와 중복된 값도 같이 조회됨
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
UNION ALL
SELECT '200','선동일','D9',8000000 FROM DUAL;

-- INTERSECT : 여러 개의 SELECT 결과에서 공통된 부분만 결과로 추출 (교집합)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
INTERSECT
SELECT 'A','B','C',10 FROM DUAL;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
INTERSECT
SELECT '200','선동일','D9',8000000 FROM DUAL;


-- MINUIS : 선행 SELECT 결과에서 다음 SELECT 결과와 겹치는 부분을 제외한 나머지만 추출(차집합)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
MINUS
SELECT 'A','B','C',10 FROM DUAL;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
MINUS
SELECT '200','선동일','D9',8000000 FROM DUAL;


-- 직원 테이블에서 부서코드가 'D5'인 사원들의 사번, 이름, 부서코드, 급여 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
    WHERE DEPT_CODE = 'D5'
MINUS
-- 직원 테이블에서 급여가 3000000 초과인 사원의 사번, 이름, 부서코드, 급여 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE
    WHERE SALARY > 3000000;
    

---------------------------------------------------------------------------------------

NON-EQUAL JOIN
https://myjamong.tistory.com/174
-------------------------------------------------------------
/*  JOIN
    ★★★★ 두 개 이상의 테이블에서 연관성을 가지고 있는 데이터들을 따로 구분하여
            새로운 가상의 테이블을 이용하여 데이터를 출력하는 구문
    두 개 이상의 테이블을 하나로 합쳐서 결과를 조회
    두 개 이상의 테이블의 컬럼들을 조합해서 새로운 형태의 테이블로 조회  
*/
-------------------------------------------------------------
-- 직원 테이블에서 사번, 이름, 부서코드를 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE FROM EMPLOYEE;

-- 부서 테이블에서 부서코드, 부서명을 조회
SELECT DEPT_ID, DEPT_TITLE FROM DEPARTMENT;

-- 오라클 전용 구문 (암시적 조인)
    -- JOIN 키워드를 사용하지 않고, 기존 SELECT 문을 이용해서 JOIN과 동일한 결과를 조회
    -- FROM절에 콤마(,)로 구분하여 합치고 싶은 테이블명을 추가로 기술
    -- 두 테이블의 컬럼명이 다른 경우
    SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
        FROM EMPLOYEE,DEPARTMENT WHERE DEPT_CODE=DEPT_ID;
    -- 두 테이블의 컬럼명이 같은 경우
    SELECT EMP_ID, EMP_NAME, EMPLOYEE.JOB_CODE,JOB.JOB_CODE,JOB_NAME 
        FROM EMPLOYEE, JOB WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;
        -- 테이블 이름에 별칭 지정
    SELECT EMP_ID, EMP_NAME, E.JOB_CODE,J.JOB_CODE,JOB_NAME 
        FROM EMPLOYEE E,JOB J WHERE E.JOB_CODE = J.JOB_CODE;  
    DESC JOB;
    SELECT * FROM JOB;
    DESC EMPLOYEE;
--  ANSI 표준구문(명시적 조인)
    -- 두 테이블의 컬럼명이 다른 경우
    SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE FROM EMPLOYEE
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
    -- 두 테이블의 컬럼명이 같은 경우
    SELECT EMP_ID, EMP_NAME, E.JOB_CODE,J.JOB_CODE,JOB_NAME FROM EMPLOYEE E
        JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE);
        -- 또는
    SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME FROM EMPLOYEE
        JOIN JOB USING(JOB_CODE);
        
/*
    기본적으로 JOIN은 INNER JOIN
    1. INNER JOIN : 두 개 이상의 테이블을 조인할 때 일치하는 값이 없는 행은 조인에서 제외됨
    2. OUTER JOIN : 일치하지 않는 값도 포함이 되며 반드시 OUTER JOIN 명시
    2-1. LEFT OUTER JOIN : 합치기에 사용한 두 테이블 중 
                왼쪽에 기술된 테이블의 컬럼 수를 기준으로 JOIN 할 때
    2-2. RIGHT OUTER JOIN: 합치기에 사용한 두 테이블 중
                오른쪽에 기술된 테이블의 컬럼 수를 기준으로 JOIN 할 때
    2-3. FULL OUTER JOIN: 합치기에 사용한 두 테이블이 가진 모든 행을 결과에 포함시킬 때
*/

-- INNER JOIN
SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID FROM EMPLOYEE
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- LEFT OUTER JOIN
-- ANSI 표준
SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID FROM EMPLOYEE
    LEFT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 오라클 전용 구문
SELECT EMP_NAME, DEPT_TITLE, E.DEPT_CODE, D.DEPT_ID FROM EMPLOYEE E, DEPARTMENT D
    WHERE E.DEPT_CODE = D.DEPT_ID(+);
    --  아우터 조인 시 대상 컬럼에 "(+)" 기호를 붙여서 조인

-- RIGHT OUTER JOIN
-- ANSI 표준
SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID FROM EMPLOYEE
    RIGHT OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 오라클 전용 구문
SELECT EMP_NAME, DEPT_TITLE, E.DEPT_CODE, D.DEPT_ID FROM EMPLOYEE E, DEPARTMENT D
    WHERE E.DEPT_CODE(+) = D.DEPT_ID;
    --  아우터 조인 시 대상 컬럼에 "(+)" 기호를 붙여서 조인
    
-- FULL OUTER JOIN
-- ANSI 표준
SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID FROM EMPLOYEE
    FULL OUTER JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 오라클 전용 구문
SELECT EMP_NAME, DEPT_TITLE, E.DEPT_CODE, D.DEPT_ID FROM EMPLOYEE E, DEPARTMENT D
    WHERE E.DEPT_CODE(+) = D.DEPT_ID(+);
    -- FULL OUTER JOIN 은 오라클 전용 구문으로 사용 불가능

-- CROSS JOIN : 카테시안곱(CARTESIAN PRODUCT)
    -- 조인되는 테이블의 각 행들이 모두 매핑된 데이터가 검색되는 방법
    -- 총 조회되는 레코드(ROW) 개수 : 앞 테이블 레코드 개수 * 뒤 테이블 레코드 개수
SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID FROM EMPLOYEE
    CROSS JOIN DEPARTMENT;
-- 오라클 전용 구문
SELECT EMP_NAME, DEPT_TITLE, DEPT_CODE, DEPT_ID FROM EMPLOYEE,DEPARTMENT;

-- NON EQUAL JOIN(NON_EQU JOIN 이라고 함)
    -- 지정한 컬럼 값이 일치하는 경우가 아닌, 값의 범위에 포함되는 행들을 연결하는 방식
SELECT EMP_NAME, SALARY, E.SAL_LEVEL, S.SAL_LEVEL FROM EMPLOYEE E
    JOIN SAL_GRADE S ON(SALARY BETWEEN MIN_SAL AND MAX_SAL); 
-- 어떤 범위 안에 들어오는건지 보고 옆에 있는 것과 연결을 시켜준다

SELECT EMP_NAME, SALARY, E.SAL_LEVEL, S.SAL_LEVEL FROM EMPLOYEE E
    JOIN SAL_GRADE S ON(E.SAL_LEVEL = S.SAL_LEVEL); 

SELECT * FROM SAL_GRADE;

-- SELF JOIN
    -- 두 개 이상의 서로 다른 테이블을 연결하는 것이 아닌 같은 테이블을 조인하는 것
-- ANSI 표준
SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME
    FROM EMPLOYEE E
    JOIN EMPLOYEE M ON(E.MANAGER_ID = M.EMP_ID);
-- 오라클 전용 구문
SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_CODE, E.MANAGER_ID, M.EMP_NAME
    FROM EMPLOYEE E , EMPLOYEE M
    WHERE E.MANAGER_ID = M.EMP_ID;

-- 다중 JOIN : N개의 테이블을 조회할 때 사용
-- ANSI 표준
SELECT * FROM EMPLOYEE;
SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE, JOB_CODE, JOB_NAME FROM EMPLOYEE E
    LEFT OUTER JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
    LEFT OUTER JOIN JOB USING (JOB_CODE);
    
-- 오라클 전용
SELECT  EMP_NAME, DEPT_CODE, DEPT_TITLE, E.JOB_CODE, JOB_NAME 
    FROM EMPLOYEE E, DEPARTMENT D, JOB J 
    WHERE DEPT_CODE = DEPT_ID(+) AND E.JOB_CODE = J.JOB_CODE(+);

-- 다중 조인 사용 시 주의 사항
    -- 다중 조인의 경우 조인 순서가 중요!!
SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
    FROM EMPLOYEE
    JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID); 
    -- 오류 (LOCATION ID는 DEPARTMENT에 있기 때문에 DEPARTMENT가 먼저 와야함 DEPT_CODE로 DEPT_ID먼저 찾아야 함)
SELECT * FROM DEPARTMENT;

SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
    FROM EMPLOYEE
    JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCATION_ID, LOCAL_NAME
    FROM EMPLOYEE, DEPARTMENT, LOCATION
    WHERE DEPT_CODE = DEPT_ID AND LOCATION_ID = LOCAL_CODE;
------------------------------------------------------------
/*  SUBQUERY
    QUERY 문 안에 포함된 또 다른 QUERY 문
    SUBQUERY 자체만으로 완성이 되어 있어야 한다
    반드시 소괄호() 로 묶어 줘야 함
    메인쿼리가 실행되기 전에 실행되며 한번만 실행됨
    
    서브쿼리 사용 위치
        SELECT, FROM, WHERE, HAVING, GROUP BY, ORDER BY 
        INSERT, UPDATE
        CREATE TABLE, CREATE VIEW
*/
------------------------------------------------------------
-- 직원 테이블에서 급여가 평균 급여 이상인 직원 사번, 이름, 직급코드, 급여 조회
SELECT AVG(SALARY) FROM EMPLOYEE; -- 평균 급여 구하기
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY FROM EMPLOYEE
    WHERE SALARY >= (SELECT AVG(SALARY) FROM EMPLOYEE);
-- 다른 쿼리를 실행한 다음에 그 결과값으로 쿼리문을 실행 시켜야 할 때

/* SUBQUERY의 결과가 어떠냐에 따라
    유형
    1. 단일행 서브쿼리
        서브쿼리의 조회 결과 값이 개수가 1개인 서브쿼리
    2. 다중행 서브쿼리
        서브쿼리의 조회 결과 값이 행이 여러 개인 서브뤄리
    3. 다중열 서브쿼리
        서브쿼리의 조회 결과 컬럼의 개수가 여러 개인 서브쿼리
    4. 다중행 다중열 서브쿼리
        서브쿼리의 조회 결과 컬럼의 개수와 행의 개수가 여러 개인 서브쿼리
    5. 상(호연)관 서브쿼리 - 서로 연관이 돼 있어서
        서브쿼리가 만든 결과 값을 메인 쿼리가 비교 연산할 때 메인 쿼리
        테이블의 값이 변경되면 서브쿼리의 결과 값도 바뀌는 서브쿼리
    6. 스칼라 서브쿼리
        상관쿼리이면서 결과 값이 한 개인 서브쿼리
        
    서브쿼리의 유형에 따라 서브쿼리 앞에 붙는 연산자가 다름
    EX)
    값이 하나만 나오면 비교연산자 사용해서 비교하면 됨
    값이 여러개가 나오면 IN, NOT IN 같은 목록에 대한 연산자 사용
*/

-- 단일행 서브쿼리
    -- 연산자 : <, >, <=, >= , = , != | ^= | <>
    SELECT * FROM EMPLOYEE;
    -- 직원별로 급여를 받음, 노옹철이 누가 자기보다 월급을 많이 받는지 보고 싶음
    -- 노옹철 사원보다 급여를 많이 받는 직원 이름,부서, 직급, 급여 조회
    SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '노옹철';
    SELECT EMP_NAME, DEPT_CODE, JOB_CODE, SALARY FROM EMPLOYEE
        WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME='노옹철');
