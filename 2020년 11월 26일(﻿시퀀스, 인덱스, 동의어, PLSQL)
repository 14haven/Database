2020년 11월 26일


시퀀스 (SEQEUNCE)

-- 자동 번호 발생기 역할을 하는 객체

-- 순차적으로 정수 값을 자동으로 생성해줌

-- 자동으로 순차적으로 증가하는 순번을 반환하는 데이터베이스 객체


----------------------------------------------------------------------------


시퀀스 생성

CREATE SQUENCE <시퀀스이름>

[STRAT WITH <숫자>] -- 처음 발생시킬 시작값 지정, 생략하면 자동 1이 기본

[INCREMENT BY <숫자>] -- 다음 값에 대한 증가치, 생략하면 자동 1이 기본

[MAXVALUE <숫자> | NOMAXVALUE] -- 발생시킬 최대값 지정 (10의 27승, -1)

(기본값 9999999999999999999999999999)

NOMAXVALUE : 디폴트값 설정, 증가일때 1027, 감소일때 -1

MAXVALUE : 최대값 설정, 시작숫자와 같거나 커야하고 MINVALUE보다 커야함

[MINVALUE 숫자 | NOMINVALUE] -- 최소값 지정 (-10의 26승) (기본값 1)

NOMINVALUE : 디폴트값 설정, 증가일때 1, 감소일때 -1028

MINVALUE : 최소값 설정, 시작숫자와 같거나 작아야하고 MAXVALUE보다 작아야함

[CYCLE | NOCYCLE] -- 값 순환 여부 지정(기본값 NOCYCLE)

시퀀스가 최대값까지 증가 완료 시 CYCLE은 START WITH 설정 값으로 돌아감

NOCYCLE은 에러 발생

[CACHE <바이트크기> | NOCACHE] -- 메모리 상에서 시퀀스 값 관리(기본값 CACHE 20)

CACHE 설정시 메모리에 시퀀스 값을 미리 할당하고

NOCACHE 설정시 시퀀스값을 메모리에 할당하지 않음

캐쉬메모리 기본값은 20바이트, 최소값은 2바이트

Cache를 사용하면 시퀀스값의 액세스 효율이 Cache를 사용하지 않았을때보다 증가



----------------------------------------------------------------------------


시퀀스 생성

-- 300부터 시작해서 5씩 증가하고 최대 310까지 증가하다가 310이 되면 그만 생성하기(캐쉬는 사용안함)

CREATE SEQUENCE SEQ_EMPID

START WITH 300

INCREMENT BY 5

MAXVALUE 310

NOCYCLE -- 기본값이 NOCYCLE 이기 때문에 생략해도 됨

NOCACHE ;


-- 현재 사용자의 시퀀스 조회

SELECT * FROM USER_SEQUENCES;


-- 시퀀스 생성 시 옵션을 모두 기본값으로 설정

CREATE SEQUENCE SEQ_TEST;

SELECT * FROM USER_SEQUENCES;

-- LAST_NUMBER = 1 인 것은 이제 1을 쓰겠다는 것


-----------------------------------------------------------------------------


시퀀스 사용

시퀀스명.CURRVAL : 현재 시퀀스 값 확인

시퀀스명.NEXTVAL : 시퀀스에서 다음 순번 값 가져오기


-----------------------------------------------------------------------------


-- 최초 CURRVAL 하기 전에 NEXTVAL이 한 번은 실행이 돼야 함

-- NEXTVAL을 한 번은 해야 시퀀스 번호 생성됨

SELECT SEQ_EMPID.CURRVAL FROM DUAL; --에러발생

-- 번호 생성

SELECT SEQ_EMPID.NEXTVAL FROM DUAL; -- 300

SELECT SEQ_EMPID.CURRVAL FROM DUAL;

SELECT * FROM USER_SEQUENCES;

SELECT SEQ_EMPID.NEXTVAL FROM DUAL; -- 305

SELECT SEQ_EMPID.NEXTVAL FROM DUAL; -- 310

-- 다음번호는 315가 돼야 하지만 최대값이 310이고, NOCYCLE이기 때문에 오류 발생

SELECT SEQ_EMPID.NEXTVAL FROM DUAL; -- 에러

SELECT SEQ_EMPID.CURRVAL FROM DUAL; -- 310

SELECT * FROM USER_SEQUENCES; -- LAST_NUMBER은 315가 나오지만 MAX_VALUE가 310이기 때문에 오류 생긴다.


-----------------------------------------------------------------------------


시퀀스 수정

ALTER SEQUENCE <시퀀스이름>

[INCREMENT BY 숫자] -- 다음 값에 대한 증가치, 생략하면 자동 1이 기본

[MAXVALUE 숫자 | NOMAXVALUE] -- 발생시킬 최대값 지정 (10의 27승, -1)

[MINVALUE 숫자 | NOMINVALUE] -- 최소값 지정 (-10의 26승)

[CYCLE | NOCYCLE] -- 값 순환 여부 지정

[CACHE 바이트크기 | NOCACHE] -- 메모리 상에서 시퀀스 값 관리

START WITH 값은 변경 불가능 - 변경하려면 시퀀스 삭제 후 다시 생성해야 함

최소값(MINVALUE)는 현재 사용중인 시퀀스 번호보다 높게 설정 불가능

최대값(MAXVALUE)는 현재 사용중인 시퀀스 번호보다 낮게 설정 불가능


-----------------------------------------------------------------------------


-- SEQ_EMPID 시퀀스의 증가치를 10으로 변경하고, 최대값을 400으로 변경

ALTER SEQUENCE SEQ_EMPID

INCREMENT BY 10

MAXVALUE 400;


SELECT * FROM USER_SEQUENCES;

SELECT SEQ_EMPID.CURRVAL FROM DUAL; -- 310

SELECT SEQ_EMPID.NEXTVAL FROM DUAL; -- 320

SELECT SEQ_EMPID.NEXTVAL FROM DUAL; -- 330


-----------------------------------------------------------------------------


시퀀스 삭제

DROP SEQUENCE <시퀀스명>;


-----------------------------------------------------------------------------


SELECT * FROM USER_SEQUENCES;

DROP SEQUENCE SEQ_EMPID;

DROP SEQUENCE SEQ_TEST;

SELECT * FROM USER_SEQUENCES;


------------------------------------------------------------------------------


시퀀스 활용

사용 가능

SELECT문에서 사용 가능

INSERT문에서 SELECT문에서 사용가능

INSERT문에서 VALUES절에서 사용 가능

UPDATE문에서 SET절에서 사용 가능


사용 불가

VIEW의 SELECT절에서 사용 불가

DISTINCT 키워드가 있는 SELECT문에서 사용 불가

GROUP BY, HAVING절이 있는 SELECT문에서 사용 불가 (묶어주는 경우)

ORDER BY절에서 사용 불가

SELECT, DELETE, UPDATE의 서브 쿼리

CREATE TABLE, ALTER TABLE 명령의 DEFAULT값으로 사용 불가


------------------------------------------------------------------------------


-- EMPLOYEE라는 직원 테이블에서 직원을 등록할 때마다 사원번호가 자동으로 생성돼서 저장되도록

CREATE SEQUENCE SEQ_EID

START WITH 2020001

-- INCREMENT BY 1 -- 생략하면 기본값이 1

MAXVALUE 2020999

-- NOCYCLE -- 기본값이 NOCYCLE

NOCACHE;


SELECT * FROM USER_SEQUENCES;


DESC EMPLOYEE;

ALTER TABLE EMPLOYEE MODIFY EMP_ID VARCHAR2(7);

SELECT * FROM EMPLOYEE;

INSERT INTO EMPLOYEE

VALUES(SEQ_EID.NEXTVAL, '김길동','666666-7777777','kim_gd@kh.or.kr',

'01012341234','D2','J7','S1',5000000,0.1,200,SYSDATE,NULL,DEFAULT);


SELECT * FROM EMPLOYEE;


------------------------------------------------------------------------------


시퀀스 번호 초기화

오라클 시퀀스는 번호를 초기화하는 별도의 기능을 제공하지 않음

MYSQL : AUTO_INCREMENT

현재 시퀀스 번호를 조회해서 해당번호 만큼 빼고 다시 번호를 생성해서 사용

이전 번호로 돌리고 싶을 때


------------------------------------------------------------------------------

SELECT * FROM USER_SEQUENCES;

SELECT SEQ_EID.NEXTVAL FROM DUAL; -- 2020005

-- 다음 번호는 2020006 이 되는데, 2020002번부터 다시 사용하고 싶음

-- 1. 현재 시퀀스 번호 조회

SELECT SEQ_EID.CURRVAL FROM DUAL; -- 2020005

-- 2. 증가치를 시퀀스 번호가 원하는 값이 되도록 증가/감소 설정

-- 주의!! 증감 후의 값이 최소값보다 작거나 최대값보다 크면 안됨

ALTER SEQUENCE SEQ_EID INCREMENT BY -4;

-- 3. 변경된 증가치가 사용될 수 있도록 시퀀스 번호 생성

SELECT SEQ_EID.NEXTVAL FROM DUAL;

-- 4. 증가치를 원래대로 수정

ALTER SEQUENCE SEQ_EID INCREMENT BY 1;

﻿﻿
------------------------------------------------------------------------------


인덱스

SQL명령문의 처리 속도를 향상시키기 위해서 컬럼에 대해 생성하는

오라클 객체로 내부 구조는 B*트리 형식으로 구성되어 있음


장점

검색 속도가 빨라짐

시스템에 걸리는 부하를 줄여서 시스템 전체의 성능을 향상시킴


단점

인덱스를 위한 추가 저장 공간이 필요함

인덱스를 생성하는데 시간이 걸림

데이터의 변경작업(INSERT/UPDATE/DELETE)이 자주 일어나는 경우에는 오히려 성능이 저하됨


인덱스 종류

1. 고유인덱스(UNIQUE INDEX)

중복 값이 포함될 수 없음

PRIMARY KEY 제약조건을 생성하면 자동으로 생성됨

2. 비고유인덱스(NONUINQUE INDEX)

빈번하게 사용되는 일반 컬럼을 대상으로 생성

주로 성능 향상을 위한 목적으로 생성

3. 단일인덱스(SINGLE INDEX)

한 개의 컬럼으로 구성한 인덱스

4. 결합인덱스(COMPOSITE INDEX)

두 개 이상의 컬럼으로 구성한 인덱스

5. 함수 기반 인덱스(FUNCTION-BASED INDEX)

SELECT절이나 WHERE절에 산술 계산식/함수식이 사용된 경우

계산식은 인덱스의 적용을 받지 않음


------------------------------------------------------------------------------


-- 인덱스를 관리하는 데이터 사전 조회

-- 인덱스 조회

SELECT * FROM USER_IND_COLUMNS;

-- 특정 제약조건이 설정된 컬럼은 자동으로 인덱스를 생성하기도 함

-- PRIMARY KEY, UNIQUE (NOT NULL은 생성되지 않음, 제약조건을 없애면 인덱스도 사라진다.)

-- 현재 계정에 있는 제약조건 조회

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'USER_TBL';

SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME = 'USER_TBL';


-- 인덱스 ID 조회

-- ROWID : ROW(행)의 ID(IDENTIFIY)

-- 행과 행을 구분하는 식별자

-- 디스크에 저장된 행의 물리적 위치를 나타내는 정보

SELECT ROWID, EMP_ID, EMP_NAME FROM EMPLOYEE;

/* 인덱스 ID 구조

AAAE7UAABAAALC5AAA

AAAE7U : 데이터 오브젝트 번호

AAB : 파일 번호

AAALC5 : BLOCK 번호

AAA : ROW 번호


------------------------------------------------------------------------------


인덱스 생성

CREATE [UNIQUE] INDEX <인덱스명> ON <테이블명>(컬럼명[,...] | 함수명 | 함수계산식);

고유인덱스 만들고 싶을 땐 UNIQUE를 적어준다. 생략가능


------------------------------------------------------------------------------


1. 고유인덱스(UNIQUE INDEX)

-- UNIQUE INDEX로 생성된 컬럼에는 중복값이 포함될 수 없음(NULL은 허용)

-- 오라클 PRIMARY KEY 제약조건을 생성하면 자동으로 해당 컬럼에 UNIQUE INDEX가 생성됨

-- 별도로 생성 가능

-- PRIMARY KEY를 이용하여 ACCESS하는 경우 성능 향상에 효과가 있음


SELECT * FROM EMPLOYEE;

SELECT EMP_NO FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE EMP_NO = '1111';

-- EMP_NO는 중복 될 수 없다. -> 이걸 이용해서 고유인덱스 만들기

CREATE UNIQUE INDEX IDX_EMPNO ON EMPLOYEE(EMP_NO);

SELECT * FROM EMPLOYEE WHERE EMP_NO > '000101 -1111111';

SELECT * FROM USER_IND_COLUMNS;


-- 중복값이 있는 컬럼은 UNIQUE INDEX 생성 못함

CREATE UNIQUE INDEX IDX_DEPTCODE ON EMPLOYEE(DEPT_CODE); -- DEPT_CODE에 중복된 값 있어서 에러


------------------------------------------------------------------------------


2. 비 고유인덱스(NONUNIQUE INDEX)

-- 빈번하게 사용되는 일반 컬럼을 대상으로 생성

-- 주로 성능 향상을 위한 목적으로 생성함

-- 중복값이 있는 컬럼에도 생성 가능

CREATE INDEX IDX_DEPTCODE ON EMPLOYEE(DEPT_CODE);

SELECT * FROM USER_IND_COLUMNS;


------------------------------------------------------------------------------


3. 결합 인덱스(COMPOSITE INDEX)

-- 두 개 이상 컬럼을 같이 조건으로 지정해서 조회할 경우 활용

CREATE INDEX IDX_DEPT ON DEPARTMENT(DEPT_ID,DEPT_TITLE);

SELECT * FROM USER_IND_COLUMNS;


SELECT * FROM DEPARTMENT WHERE DEPT_ID >'0' AND DEPT_TITLE >'0';


------------------------------------------------------------------------------


4. 함수 기반 인덱스

-- SELECT절이나 WHERE절이나 산술계산식이나 함수식이 사용된 경우

-- 계산식은 인덱스의 적용을 받지 않음

-- 계산식으로 검색하는 경우가 많다면, 수식이나 함수식 자체를 인덱스로 만들 수 있음


CREATE TABLE EMP_IDX01 AS SELECT * FROM EMPLOYEE;

CREATE INDEX IDX_EMP02_SALARY

ON EMP_IDX01((SALARY + SALARY * NVL(BONUS,0)) * 12);

DROP INDEX IDX_EMP02_SALARY;


SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME = 'EMP_IDX01';

SELECT EMP_ID, EMP_NAME, ((SALARY + SALARY * NVL(BONUS,0)) * 12) 연봉

FROM EMP_IDX01 WHERE ((SALARY + SALARY * NVL(BONUS,0)) * 12) = 72000000;


------------------------------------------------------------------------------


INDEX 재생성

ALTER INDEX 인덱스명 REBUILD;

DML작업(특히 DELETE)명령을 수행한 경우,

해당 인덱스 내에서 엔드리가 논리적으로만 제거되고 실제 엔드리는 그냥 남아있게 된다.

인덱스가 필요 없는 공간을 차지하고 있기 때문에 인덱스를 재 생성할 필요가 있다.


SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME = 'EMPLOYEE';

ALTER INDEX IDX_EMPNO REBUILD; -- 우리 눈에 보이진 않지만 내부적으로 바뀐 것

﻿﻿
------------------------------------------------------------------------------


인덱스 삭제

DROP INDEX <인덱스명>;


SELECT * FROM USER_IND_COLUMNS;

DROP INDEX IDX_DEPTCODE;

DROP INDEX IDX_DEPT;


검색을 많이 하는 테이블, 특정 컬럼을 기준으로 정렬해서 검색을 하는 경우 등

인덱스를 생성해서 사용하면 검색 속도가 빨라진다.


------------------------------------------------------------------------------


인덱스 활용 테스트

1. 인덱스 테스트 용 테이블 생성 후 데이터 삽입

-> USER_MOCK_DATA@KH.sql 스크립트 파일 사용

2. 인덱스 사용 여부 확인

-> SQL 워크시트 상단 메뉴 중 실행계획(F10) OR 자동추적(F6) 으로 확인 가능

실행 계획 : 실행하기 전 어떻게 실행할지 확인 - 단점 : 계획과 실제 실행이 다를 수 있음

자동 추적 : 실행하고 나서 어떻게 실행했는지 결과 확인 - 단점 : 실행 내용에 따라 오래 걸릴 수도 있음

OPTIONS : 인덱스 스캔 = BY INDEX FROWID... , 풀 스캔 = FULL SCAN

CADINALITY : 집합의 크기

COST : 비용 (실행하는 데에 얼마나 드느냐 , 시간,장치,메모리 등등이)

-> 자동 추적은 사용하려면 권한이 있어야 함(권한 오류 뜰 경우 관리자 계정으로 권한부터 부여해 주고 실행)



-- 자동 추적을 위한 권한 부여(관리자 계정)

GRANT SELECT ANY DICTIONARY TO KH;


-- 전체 데이터 확인

-- 실행 계획 OR 자동 추적으로 확인해보기

SELECT * FROM USER_MOCK_DATA;


-- 현재 설정되어 있는 인덱스 조회

SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME = 'USER_MOCK_DATA';


-- 인덱스 설정 전 실행 계획 확인

-- ID 컬럼 조건 검색

SELECT * FROM USER_MOCK_DATA WHERE ID = '22222';

-- EMAIL 컬럼 조건 검색

SELECT * FROM USER_MOCK_DATA WHERE EMAIL = 'kbresland0@comsenz.com';

-- GENDER 컬럼 조건 검색

SELECT * FROM USER_MOCK_DATA WHERE GENDER = 'Male';

-- FIRST_NAME 커럼 LIKE 연산

SELECT * FROM USER_MOCK_DATA WHERE FIRST_NAME LIKE 'R%';


-- 제약조건을 이용해서 인덱스 생성(PK)

ALTER TABLE USER_MOCK_DATA ADD CONSTRAINT PK_USERDATA_ID PRIMARY KEY(ID);

-- 제약조건을 이용해서 인덱스 생성(UQ)

ALTER TABLE USER_MOCK_DATA ADD CONSTRAINT UQ_USERDATA_EMAIL UNIQUE(EMAIL);


SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME = 'USER_MOCK_DATA';


-- 인덱스 설정 후 실행 계획 확인

-- ID 컬럼 조건 검색

SELECT * FROM USER_MOCK_DATA WHERE ID = '22222';

-- EMAIL 컬럼 조건 검색

SELECT * FROM USER_MOCK_DATA WHERE EMAIL = 'kbresland0@comsenz.com';

-- GENDER 컬럼 조건 검색

SELECT * FROM USER_MOCK_DATA WHERE GENDER = 'Male';

-- FIRST_NAME 커럼 LIKE 연산

SELECT * FROM USER_MOCK_DATA WHERE FIRST_NAME LIKE 'R%';


------------------------------------------------------------------------------


동의어(SYNONYM)

다른 데이터베이스(사용자)가 가진 객체에 대한 별명, 혹은 줄임말

여러 사용자가 테이블을 공유할 경우,

다른 사용자의 객체를 참조할 때는 [사용자ID],[객체명] 으로 접근을 해야 함

이처럼 길게 표현되는 것을 동의어(SYNONYM)으로 설정 후 간단히 사용 가능


비공개 동의어

객체에 대한 접근 권한을 부여 받은 사용자가 정의한 동의어로 해당 사용자만 사용 가능

공개 동의어

권한을 주는 사용자(DBA, 관리자)가 정의한 동의어로 모든 사용자가 사용 가능(PUBLIC)

EX) DUAL


------------------------------------------------------------------------------


SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = 'KH';

SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'KH';


-- KUSER 계정에 접속 권한 부여(관리자 계정)

GRANT CREATE SESSION TO KUSER;

-- 테스트를 위해 KUSER 계정에 KH.EMPLOYEE 테이블 조회 권한 부여(관리자 계정 또는 KH계정)

GRANT SELECT ON KH.EMPLOYEE TO KUSER;


-- 테이블 조회 해보기(KUSER 계정)

SELECT * FROM KH.EMPLOYEE;


------------------------------------------------------------------------------


동의어 생성

CREATE [PUBLIC | PRIVATE] SYNONYM<줄임말> FOR [사용자명.].<객체명>;


------------------------------------------------------------------------------


-- 비공개 동의어 생성(KH계정)

-- CREATE SYNONYM 권한 없으면 오류 발생

CREATE /*PRIVATE*/ SYNONYM EMP FOR /*KH.*/EMPLOYEE; -- 에러

SELECT * FROM SESSION_PRIVS;


-- KH 계정에 CREATE SYNONYM 권한 부여(관리자 계정)

GRANT CREATE SYNONYM TO KH;


-- 권한 부여 후 SYNONYM 생성(KH계정)

CREATE SYNONYM EMP FOR EMPLOYEE; -- 정상 생성됨


-- 현재 계정의 동의어 설정 조회(KH계정)

SELECT * FROM USER_SYNONYMS;

-- 모든 동의어 설정 조회

SELECT * FROM ALL_SYNONYMS;

SELECT * FROM TAB; -- 원래는 SELECT * FROM SYS.TAB; 이라고 조회해야 하는데 SYNONYM 생성 돼있어서 TAB이라고만 써도 됨

SELECT * FROM ALL_SYNONYMS WHERE TABLE_OWNER = 'KH';


-- 설정 확인(KH계정)

SELECT * FROM EMPLOYEE;

SELECT * FROM EMP; -- EMPLOYEE랑 똑같이 잘 조회됨


-- 다른 계정에서 사용 시도(관리자, KUSER계정)

SELECT * FROM KH.EMPLOYEE;

SELECT * FROM EMP; -- KH를 안붙이면 오류발생, 관리자,KUSER 모두 EMP 동의어로 사용 불가능


------------------------------------------------------------------------------


-- 공개 동의어 생성(관리자 계정)

CREATE PUBLIC SYNONYM PUB_EMP FOR KH.EMPLOYEE;


-- 동의어 설정 조회(관리자 계정)

SELECT * FROM USER_SYNONYMS; -- 내 계정에서만 사용하는 시노님

SELECT * FROM ALL_SYNONYMS WHERE TABLE_OWNER = 'KH';


-- 설정 확인(관리자, KH, KUSER 계정)

SELECT * FROM PUB_EMP;


------------------------------------------------------------------------------


동의어 삭제

DROP SYNONYM <동의어명>;

PUBLIC 동의어를 제거 할때는 DROP PUBLIC SYNONYM 권한이 있어야 함


------------------------------------------------------------------------------


-- 비공개 동의어 삭제(KH계정)

DROP SYNONYM EMP; -- 삭제 가능


-- 공개 동의어 삭제(관리자 계정)

-- KH계정

DROP PUBLIC SYNONYM PUB_EMP; -- 권한 없으면 오류 (관리자 계정에서 삭제)

-- 관리자계정

DROP PUBLIC SYNONYM PUB_EMP; -- 삭제 가능



------------------------------------------------------------------------------

﻿﻿
PL/SQL(PROCEDURAL LANGUAGE EXTENSION TO SQL)

오라클 자체에 내장된 절차적 언어

SQL의 단점을 보완하여 SQL문장 내에서

변수의 정의, 조건처리, 반복처리, 예외처리 등을 지원


PL/SQL의 유형

1. 익명블록(Anonymous Block)

이름없는 블록이라 불리며 간단한 block 수행시 사용됨

2. 프로시저(Procedure)

지정된 특정 처리를 실행하는 서브 프로그램의 한 유형으로,

단독으로 실행되거나 다른 프로시저나, 다른 툴(oracle developer, sqlplus,...)등에

호출되어 실행됨

3. 함수(Function)

프로시저와 수행되는 결과가 유사하나 값 반환 여부에 따라 차이가 있음

함수는 반환값이 있음


내가 사용하고 싶은 명령문들 이름 지정 해놓고 내가 필요할 때 호출해서 사용하는 것

반환값이 있냐 없냐에 따라 프로시저와 함수가 나뉜다


PL/SQL 블록 문법

DECLARE

선언부;

BEGIN

실행부;

EXCEPTION

예외처리부;

END;

/


PL/SQL 구조

선언부, 실행부, 예외처리부로 구성

DECLARE SECTION (선언부) - 선택

-> 변수나 상수를 선언하는 부분

-> DELCARE 로 시작함


EXCUTABLE SECTION (실행부) - 필수

-> SQL문, 제어문, 반복문, 함수 정의 등 로직 작성

-> BEGIN 으로 시작함


EXCEPTION SECTION (예외 처리부) - 선택

-> 예외 사항 발행 시 해결하기 위한 문장 작성

-> EXCEPTION 으로 시작함


END (종료부) - 필수

-> 하나의 블록이 끝났음을 명시하는 부분

-> END; 로 종료


/ - 필수

-> PL/SQL 종료 및 실행

-> 쿼리문 종결을 나타내는 기호

-> 행에 '/'가 있으면 종결된 것으로 간주


PL/SQL 프로그램 작성 방법

- PL/SQL 블록 내에서는 한 문장을 종료할 때마다 세미콜론(;)을 사용함

- END 뒤에 세미콜론(;)을 사용하여 하나의 블록이 끝났다는 것을 명시

- PL/SQL 블록의 작성은 메모장과 같은 편집기를 통해서 SQL파일로 저장할 수도 있고,

SQL> 프롬프트에서 바로 작성할 수도 있음

- SQL*PLUS 환경에서는 DECLARE나 BEGIN 이라는 키워드로 PL/SQL 블록이 시작함을 알 수 있음

- 쿼리문을 수행하기 위해서 /가 입력이 되어야 하며, PL/SQL블록은 행에 /가 있으면 종결된 것으로 간주함


------------------------------------------------------------------------------


-- PL/SQL 기본 테스트

-- SERVEROUTPUT : 프로시저를 사용하여 출력하는 내용을 화면에 보여주도록 설정하는 환경변수

-- 기본값 OFF여서 ON으로 변경 해줘야 함

SET SERVEROUTPUT ON;


-- PUT_LINE : DBMS_OUTPUT 패키지에 속해있는 프로시저 - 화면에 출력해주는 기능


BEGIN -- 실행부 시작

DBMS_OUTPUT.PUT_LINE('HELLO WORLD');

END; -- 블록 종료

/ -- PL/SQL 끝과 동시에 실행해라


-- BEGIN과 END안에 내가 실행시키고 싶은 문장 넣으면 됨


BEGIN

SELECT * FROM EMPLOYEE;

END;

/

-- 출력 안됨 (SELECT문을 그냥 저렇게 쓰면 출력안된다)


------------------------------------------------------------------------------


변수

DECLARE(선언부) 안에 선언해줘야 함


표현식 :

<변수명> [CONSTANT] DATATYPE [NOT NULL] [:= <초기값> | DEFAULT <초기값>]

CONSTANT 상수로 지정(초기값을 반드시 할당해야 함, 값을 변경 할 수 없기 때문)

DATATYPE 자료형

NOT NULL 값을 반드시 포함(NULL 허용안함)

<초기값> 리터럴, 다른 변수, 연산자나 함수를 포함하는 표현식


------------------------------------------------------------------------------


-- 변수의 선언과 초기화, 변수값 출력 1


DECLARE

EMP_ID NUMBER := 888;

EMP_NAME VARCHAR2(30) := '홍길동';

BEGIN

DBMS_OUTPUT.PUT_LINE('변수 출력 테스트');

DBMS_OUTPUT.PUT_LINE('1_EMP_ID 값 : ' || EMP_ID); -- || : 문자열 연결

DBMS_OUTPUT.PUT_LINE('1_EMP_NAME 값 : ' || EMP_NAME);

END;

/
