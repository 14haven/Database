2020년 11월 16일


개발환경구축


포트 번호, 포트 주소
내가 다른 컴퓨터에 데이터를 보내고 싶다.
브라우저를킴 - 네이버 주소를 입력함 - 내가 요청하는게 네이버한테 감
각각의 페이지에 번호를 붙여놓음
데이터를 보내줄 때 번호를 포함시켜서 같이 보냄
다시 응답을 보내줄 때 그 번호에 보내줌

Port for 'Oracle Database Listener': 1521
Port for 'Oracle Services for Microsoft Transaction Server': 2030
Port for 'Oracle HTTP Listener': 8080

포트번호 충돌하지 않도록 주의

GUI - graphic user interface
CLI - command line interface
TUI - text user interface 
=> SQL *PLUS 
- SQL문을 실행시키고 결과를 볼 수 있도록  ORACLE에서 제공하는 기본 Tool
- 명령창(Command Line) 기반으로 동작

- 실행방법 1
	시작 -> Oracle Database 11g Express Edition -> Run SQL Command Line
- 실행방법 2
	실행 -> 명령프롬프트(cmd) -> sqlplus 명령어로 실행

- 계정 접속 1(sqlplus 실행 후)
	SQL> connect 계정명[/비밀번호] [as 접속권한]
	접속 시 비밀번호를 입력하지 않으면 비밀번호 입력 라인이 나옴
		-> Enter Password :
		-> 비밀번호 입력 시 화면에 출력되지 않음
- 계정 접속 2(sqlplus 실행 시 계정 접속)
	c:\>sqlplus [옵션] [계정명/비밀번호] [as 접속권한]
	/nolog 옵션 : 로그인하지 않고 접속
	비밀번호에 특수문자를 사용하면 로그인 시 그냥 인식을 못한다
		비밀번호 전체를 " "로 묶고, 특수문자 앞에 \를 같이 적어줘야 함
		sqlplus sys/\"P\@ssw0rd\"
	접속권한
		normal(별도로 지정X) : 일반 사용자 권한
		sysdba : DBA 권한
		sysoper : 운영자 권한
		(데이터베이스를 생성하고 삭제할 수 있냐의 차이)
		dba -> 생성하고 삭제 할 수 있는 권한 있음
		oper -> 권한은 없고 운영만 할 수 있음
 
		

--------------------------------------------------------------------------------------


SELECT USERNAME FROM DBA_USERS;
이렇게 세미콜론 붙여줘야 한다.
몇몇은 안 붙여줘도 된다. (SHOW USER)

한줄 실행 -> ctrl+enter
전체 실행 -> 드레그 한 다음 ctrl+enter

-- 한줄주석
/* 범위주석 */

--------------------------------------------------------------------------------------


데이터베이스 구조

Oracle DBMS의 구조는 MySQL이나 MSSQL과 조금 다름

MySQL MSSQL
일반 사용자 계정으로 들어가도
우리 데이터베이스의 구조를 다 볼 수는 있음

Oracle
일단 데이터를 쓰려면 사용자 계정이 있어야함
사용자 기반
계정별로 쓸 수 있는 것이 정해져있다
내가 만든 내 테이블에 대해서는 내가 관리할 수 있도록
사용자 계정으로 들어가면 딱 내 것만 볼 수 있음
구조 관리하는 것 따로 있음
Tablespace -> 파일철에 한 번 더 꽂아놓는다고 생각하면 된다.
우리가 제어 할 수 있는 것: Tablespace(Table들을 넣어놓는 폴더), Table


- 데이터베이스
체계화된 데이터의 모임

- 테이블 스페이스
테이블이 저장되는 공간
기본적으로 생성되어 있음(SYSTEM, UNDOTBS, TEMP 등..)
사용자에 의해 추가적으로 여러 개의 테이블스페이스가 생성될 수 있음

- 오브젝트(Object)
데이터를 관리하기 위해 생성하는 모든 것
table, index, view, sequence 등
table: 가장 기본이 되는 오브젝트

- 세그먼트(Segment)
Object 중에서 저장공간을 가지고 있는 것
실제 저장공간을 가지고 있는 오브젝트,구조만 있는 오브젝트
내가 표 그려서 입력하는 대로 저장해주는 오브젝트들이 있고
저장한 걸 참조만 하는 오브젝트가 있음
저장공간 가지고 있는 놈 -> 세그먼트

- 익스텐트(Extent)
데이터를 저장하는 논리적 단위
일정한 수의 연속된 Block들로 구성
I/O를 할 때 속도를 높이기 위해 도입된 개념

조금 더 많이 묶어서 한번에 처리하기 위해
ex) 100글자 가져온다 하면 2글자를 50번 가져와야하기 때문에 번거로움

- 데이터 블록(Block)
오라클에서 사용하는 데이터처리의 최소의 논리단위
I/O의 최소 단위(I/O -> Input, Output) 로 하나 또는 그 이상의 OS Block으로 이루어짐

- 테이블 구조
* 사진 첨부

Colums Name
Rows = Record  = Tuple = 행 = 연관된 데이터들
Columns = Fields = Attribute = 열 = 연관된 하나의 속성을 가진 데이터들
Field


- Table (= Relation)
데이터의 세부 목적에 맞게 구조적 목적으로 묶어 놓은 영역
행(row)과 열(column)으로 구성되는 가장 기본적인 데이터베이스 객체로
데이터 베이스 내에서 모든 데이터는 테이블을 통해서 저장됨

- Colunms (=Fields =Attribute = 열) 연관된 하나의 속성을 가진 데이터들
특정한 단수 자료 형의 일련의 데이터 값과 테이블에서의 각 열

- Rows (= Record = Tuple = 행) 연관된 데이터
테이블에서 한 객체에 대한 전체 정보

- Field 딱 데이터 하나
Column의 대용으로 동일한 의미로 사용되지만 한 행과 한 열의 교차지점에 있는
단일 값을 특별히 지칭하는 용어


--------------------------------------------------------------------------------------

SQL (Structured Query Language)
데이터베이스에서 사용하는 명령어, 언어

구조화된 질의 언어
(우리가 명령어를 통해서 데이터베이스한테 물어보면 데이터베이스는 처리해서 그것을 답해줌)
DMBS를 관리하고 제어하기 위해 사용하는 인터페이스 또는 언어
데이터베이스로부터 정보를 얻거나 갱신하기 위한 표준 대화식 프로그래밍 언어
DBMS에 따라 사용되는 SQL 문법이 다름

* 기본문법 사진 첨부


SQL 기본 문법
기본 명령어들이 크게 세가지(DDL, DML, DCL)고, 좀 더  세부적으로는 다섯가지로 나눠진다.
SELECT는 DML에 속하지만 DQL(데이터 쿼리어)로 따로 구분하기도 한다.
COMMIT, ROLLBACK은 트렉젝션을 수행하기 위한 언어로DTL로 구분되기도 한다.

- 데이터 정의어 (DDL, Data Definition Language)  틀 만들기
DBMS안에서 테이블, 테이블스페이스 그 외 오브젝트 들을 생성하고 삭제하고 수정할 수 있는 것
데이터베이스의 구조를 정의하거나 변경, 삭제하기 위해 사용하는 언어
주로 DB관리자 또는 설계자가 사용
CREATE(객체 생성), ALTER(객체 수정), DROP(객체 삭제), TRUCATE(객체 초기화)

- 데이터 조작어 (DML, Data Manipulation Language)
(실제 데이터를)
data를 조작하기 위해 사용하는 언어
data의 삽입, 수정, 삭제, 조회 등의 동작을 제어
data를 이용하려는 사용자와 시스템 간의 인터페이스를 직접적으로 제공하는 언어
(data를 사용 할 때 쓰는 언어)
가장 많이 사용됨(공격 시에도 가장 많이 사용)
INSERT(데이터 생성), UPDATE(데이터 수정), DELETE(데이터 삭제), SELECT(데이터 조회)

- 데이터 제어어 (DCL, Data Control Language)
DB에 대한 보안, 무결성, 복구 등 DBMS를 제어하기 위한 언어
GRANT(권한할당), REVOKE(권한해제), COMMIT(실행), ROLLBACK(복구)
COMMIT & ROLLBACK -> 무결성을 보장하기 위한 트렌젝션을 수행할 수 있는 명령어들

--------------------------------------------------------------------------------------

DDL
(CREATE)

- DDL (Data Definition Language)
데이터 정의 언어로 객체(OBJECT)를 만들고(CREATE), 수정하고(ALTER),삭제(DROP) 하는 구문을 말함
 
- 오라클 객체 종류
테이블(TABLE), 뷰(VIEW), 시퀀스(SEQUENCE), 인덱스(INDEX), 패키지(PACKAGE),
프로시저(PROCEDURE), 함수(FUNCTION), 트리거(TRIGGER), 동의어(SYNONYM), 사용자(USER)

- CREATE
데이터베이스의 객체를 생성하는 구문
주로 테이블을 생성할 때 사용하며, 그 외에도 다양한 객체들(인덱스, 뷰 등)을 생성할 때 사용 함
생성된 구문은 DROP 구문을 통해서 제거할 수 있음

- 표현식

CREATE TABLE 테이블명 (
컬럼명 자료형(크기),
컬럼명 자료형(크기),
...);
내가 뭘 만들건지에 따라서 내용이 달라진다.

CREATE TABLE MEMBER(
MEMBER_ID VARCHAR2(20),
MEMBER_PWD VARCHAR2(20),
MEMBER_NAME VARCHAR2(20)
);


--------------------------------------------------------------------------------------

오라클 데이터형
CHAR(크기) - 고정길이 문자 데이터
CHAR(20) 이라고 적으면 5byte만 적어도 공간은 20이 늘어남
입력할 데이터의 길이가 비슷비슷 한 경우 효율적 예) 한국사람 이름, 휴대폰 번호

VARCHAR2(크기) - 가변길이 문자 데이터(최대 2,000Byte)
VARCHAR2(20)이라고 적고 5byte만 적으면 5byte만큼의 크기만 만들어지는데
나중에 더 입력하면 늘어난다. 하지만 20이라고 적었기 때문에 20까지만 늘어난다.

VARCHAR2 같은 경우 내 다음 기리킬 공간 조금 만들어놓는다
-> 공간할당해야 하는 작업을 해야하고 한 번 더 주소를 따라가야하기 때문에
성능적인 면에서는 CHAR가 VARCHAR2보다 더 좋다.
한글 3byte, 영어 1byte

NUMBER - 숫자 데이터(최대 40자리)

DATE - 날짜 데이터(BC 4712년 1월 1일~ AD 4712년 12월 31일)

BFILE - 대용량의 바이너리 데이터 저장 가능(최대 4GB)

--------------------------------------------------------------------------------------

컬럼 주석
테이블의 컬럼에 주석을 다는 구문
( 이 컬럼에 대한 설명, 이 컬럼이 뭐하는 컬럼인지 설명을 적어놓는 부분 )

- 표현식
COMMENT ON COLUMN 테이블명.컬럼명 IS '주석 내용';

COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원이름';

--------------------------------------------------------------------------------------

제약조건(CONSTRAINTS)
데이터를 저장할 때 특정 조건을 강제로 정하는 것

사용자가 원하는 조건의 데이터만 유지하기 위해서 특정 컬럼에 설정하는 제약
(각각의 컬럼마다 별도의 조건 제약 가능)
데이터 무결성을 지키기 위해 제한된 조건
입력 데이터에 문제가 없는지에 대한 검사와 데이터 수정/삭제 가능 여부 검사 등을 위해 사용

NOT NULL - 데이터에 NULL을 허용하지 않음

UNIQUE - 중복된 값을 허용하지 않음

PRIMARY KEY - NULL과 중복 값을 허용하지 않음 (컬럼의 고유 식별자로 사용하기 위해)
각각의 로우, 레코드들이 들어가는데 기준이 되는 컬럼을 하나 정함 -> 프라이머리키를 가지는 컬럼
다른 레코드들과 유일하게 구분될 수 있는 기준이 되는 컬럼을 설정하는 것, 한 테이블에 무조건 하나만 가능

FOREIGN KEY - 두 테이블의 데이터 간 연결을 설정하고 강제 적용하여 외래 키 테이블에 저장될 수 있는 데이터를 제어함
테이블을 두 개 이상 사용 할 때 사용하는 키
서로 전혀 별개의 테이블 일 수 있지만 연관된 테이블일 수 있다
회원 목록 테이블, 주문의 목록이 들어가있는 테이블
누가 주문을 했는지 회원 정보 들어가야하고, 회원 테이블에도 회원 정보 있음
주문 목록에 있는 아이디는 회원목록에 들어있는 아이디만 있을 수 있다 -> 이렇게 제약을 거는 것이 외래키

CHECK - 저장 가능한 데이터 값의 범위나 조건을 지정하여 설정한 값만 허용
해당 컬럼에 들어갈 수 있는 값을 내가 직접 지정하는 것
해당 컬럼에 들어갈 데이터의 목록을 미리 만들어 놓는 것
ex)  성별은 남, 여만 들어갈 수 있게


--------------------------------------------------------------------------------------

* NOT NULL
해당 컬럼에 반드시 값이 기록되어야 하는 경우 사용
특정 컬럼에 값을 저장/수정할 때는 NULL값을 허용하지 않도록
컬럼 레벨에서 제한
(잘못해서 NULL이 들어오지 않도록)

*NOT NULL 제약조건이 설정된 컬럼에 NULL 값이 입력되면, 행 자체를 삽입하지 않음

-- NULL 제약 조건 테이블
CREATE TABLE USER_NOTNULL(
    USER_NO NUMBER NOT NULL,
    USER_ID VARCHAR2(20) NOT NULL,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER VARCHAR2(10),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50)
);


-- 데이터 삽입 : 정상 삽입
INSERT INTO USER_NOTNULL VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');
INSERT INTO USER_NOTNULL VALUES(2,'USER1','PASS1',NULL,NULL,NULL,NULL);
-- NOT NULL 제약조건 설정된 컬럼에 NULL 값이 삽입될 경우 오류 발생
INSERT INTO USER_NOTNULL VALUES(3,NULL,NULL,'홍길동','남','010-1234-1234','hong@kh.or.kr');


--------------------------------------------------------------------------------------

* UNIQUE

컬럼 입력 값에 대해 중복을 제한하는 제약조건으로
컬럼 레벨 테이블 레벨에 설정 가능 

-- UNIQUE 제약조건 1 : 컬럼 레벨
CREATE TABLE USER_UNIQUE1(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER VARCHAR2(10),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50)
);

-- 데이터 삽입 : 정상 삽입
INSERT INTO USER_UNIQUE1 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');
--USER ID 컬럼(두번째 컬럼)에 중복된 값 삽입으로 오류 발생
INSERT INTO USER_UNIQUE1 VALUES(2,'USER1','PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');

-- NULL 값 중복은 가능
INSERT INTO USER_UNIQUE1 VALUES(2,NULL,'PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');
INSERT INTO USER_UNIQUE1 VALUES(2,NULL,'PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');


-- UNIQUE 제약조건2 : 테이블레벨
CREATE TABLE USER_UNIQUE2(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER VARCHAR2(10),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50),
    UNIQUE (USER_ID)
);

-- 데이터 삽입 : 정상 삽입
INSERT INTO USER_UNIQUE2 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');
--USER ID 컬럼(두번째 컬럼)에 중복된 값 삽입으로 오류 발생
INSERT INTO USER_UNIQUE2 VALUES(2,'USER1','PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');

-- NULL 값 중복은 가능
INSERT INTO USER_UNIQUE2 VALUES(2,NULL,'PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');
INSERT INTO USER_UNIQUE2 VALUES(2,NULL,'PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');


-- UNIQUE 제약조건3 : 테이블레벨2
CREATE TABLE USER_UNIQUE3(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER VARCHAR2(10),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50),
    UNIQUE (USER_NO,USER_ID)
);

-- 데이터 삽입 : 정상 삽입
INSERT INTO USER_UNIQUE3 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');
INSERT INTO USER_UNIQUE3 VALUES(2,'USER1','PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');
INSERT INTO USER_UNIQUE3 VALUES(2,'USER2','PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');
-- USER_NO(첫번째 컬럼)와 USER_ID(두번째 컬럼) 모두 같은 데이터 삽입 시 오류 발생
INSERT INTO USER_UNIQUE3 VALUES(2,'USER2','PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');


-- 한컬럼이라도 값이 있는 경우 중복으로 인식하여 오류 발생
INSERT INTO USER_UNIQUE3 VALUES(2,NULL,'PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');
INSERT INTO USER_UNIQUE3 VALUES(NULL,'USER2','PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');

-- 두개 컬럼 모두 NULL 값 중복은 가능
INSERT INTO USER_UNIQUE3 VALUES(NULL,NULL,'PASS2','김길동','남','010-1234-1234','hong@kh.or.kr');

--------------------------------------------------------------------------------------


-- 해당 계정의 기본 테이블 스페이스 조회
    -- 객체 생성 시 테이블 스페이스를 지정하지 않고 생성하면 자동으로 저장될 테이블 스페이스
    -- 계정에 DEFAULT TABLESPACE 를 지정하지 않은 경우 SYSTEM TABLESPACE로 생성 됨
SELECT USERNAME, DEFAULT_TABLESPACE FROM USER_USERS;

-- 특정 테이블 스페이스의 테이블 조회
SELECT TABLESPACE_NAME, TABLE_NAME FROM USER_TABLES WHERE TABLESPACE_NAME='SYSTEM';

-- 테이블 목록 확인 : 모든 계정의 테이블 목록 조회
SELECT * FROM ALL_TABLES;

-- 테이블 목록 확인 : 현재 계정의 테이블 목록 조회
SELECT * FROM TAB;
SELECT * FROM TABS;
SELECT * FROM USER_TABLES;

-- 테이블 구조 확인
DESC MEMBER;

-- 테이블 내 데이터 확인(조회)
SELECT * FROM  MEMBER;

-- 제약조건 이름 조회 : 특정 테이블에 설정된 제약조건만 조회
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='USER_UNIQUE';
-- 제약조건의 이름을 기준으로 저장, 이것만으로는 컬럼의 이름 조회 불가
-- 무슨 제약조건인지 타입, 제약조건 이름, 테이블이름 등 나옴

-- 제약조건이 설정된 컬럼 조회 : 특정 제약조건이름을 이용해서 조회
SELECT * FROM USER_CONS_COLUMNS WHERE CONSTRAINT NAME='SYS_C007001';
-- 제약조건의 컬럼을 기준으로 해서 저장
-- 어떤 컬럼에 설정 돼 있는지는 나오지만 이 컬럼이 지금 어떤 제약조건인지는 안나옴


