
2020년 11월 17일


어제 배웠던 것 복습


데이터베이스 - 데이터들을 효율적으로 관리하기 위한 것

데이터베이스를 관리하기 위한 프로그램 - DBMS

DBMS를 설치해서 그 안에 많은 데이터를 저장해서 사용

저장해놓고 원할 때 원하는 데이터를 제대로 뽑아내서 사용할 수 있게

DBMS안에 데이터를 저장하기 위해서는 공간이 있어야 한다.

폴더형태인 데이터 베이스

그 안에 ORACLE같은 경우는 테이블 스페이스를 만들고

그 안에 테이블이 들어간다.

그 테이블 안에 데이터를 적는것이다.

종이라고 생각하면 됨

테이블에도 예쁘게 적기위해서 표를 그려넣는다.

표를 그려놨을 때

열=Fields= Attribute = 서로 같은 속성을 같은 데이터

행=Row = Record = Tuple = 연관된 데이터들을 일자로


DBMS를 사용하기 위해서는 명령을 해야한다

명령어 = SQL

구조화된 질의 언어


SQL 기본 문법

DDL, DML, DCL


DDL - 데이터 정의어, 구조를 정의하는 것

다양한 객체라는 것을 생성하고, 수정하고, 삭제, 초기화

CREATE, ALTER, DROP, TRUNCATE


DML - 데이터 조작어, 실제 데이터를 조작하기 위한 언어

INSERT, UPDATE, DELETE, SELECT

생성, 수정, 삭제, 조회


DESC - SQL의 또 다른 명령문

description 테이블 구조 확인

DESC MEMBER; -> 멤버라는 테이블의 구조를 정의하겠다


DCL - 데이터 제어어, DBMS의 권한적인 부분

GRANT, REVOKE, COMMIT, ROLLBACK

권한할당, 권한해제, 실행, 복구(되돌아가는것)



----------------------------------------------------------------------------------------


CREATE 문 ★★★★★

데이터베이스의 객체를 생성하는 구문

주로 테이블을 생성할 때 사용하며, 그외에도 다양한 객체들을 생성할 때 사용 함

생성된 구문은 DROP구문을 통해서 제거할 수 있음


기본 표현법 : CREATE <객체종류> <객체명> [옵션];

테이블 생성 표현법 :

CREATE TABLE <테이블명>(

<컬럼명> <데이터타입> [옵션] [제약조건]

[,<컬럼명> <데이터타입> [옵션] [제약조건],...]

);

< > : 필수 입력 요소

[ ] : 생략 가능 요소


데이터타입 : NUMBER, CHAR(크기), VARCHAR2(크기), DATE

옵션 : DEFAULT '기본값' - 해당 컬럼에 값이 입력되지 않은 경우 저장될 기본값 설정

제약조건 : NOT NULL , UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK


----------------------------------------------------------------------------------------


제약조건(CONSTRAINTS)

PRIMARY KEY

데이터들을 효율적으로 찾아 쓰기 위해서

구분할 수 있는 기준이 있어야 함

이 기준이 PRIMARY KEY


PRIMARY KEY의 조건

1. NULL 값이 들어가면 안됨, NOT NULL의 속성

2. 유일하게 구분해야 하기 때문에 UNIQUE 속성


컬럼에 PRIMARY KEY를 설정하면 두개의 조건이 자동으로 설정된다.


한 테이블 당 하나만 설정 가능

컬럼 레벨과 테이블 레벨 둘 다 지정 가능


키의 종류

https://terms.naver.com/entry.nhn?docId=3431147&cid=58430&categoryId=58430&expCategoryId=58430


슈퍼키

https://terms.naver.com/entry.nhn?docId=3431148&cid=58430&categoryId=58430&expCategoryId=58430


후보키

https://terms.naver.com/entry.nhn?docId=3431149&cid=58430&categoryId=58430&expCategoryId=58430


기본키

https://terms.naver.com/entry.nhn?docId=3431150&cid=58430&categoryId=58430&expCategoryId=58430



-------------------------------------------------------------------

-- PRIMARY KEY 제약조건 1 : 컬럼 레벨 설정

-------------------------------------------------------------------

CREATE TABLE USER_PRIMARYKEY1(

USER_NO NUMBER PRIMARY KEY, -- 컬럼 레벨 설정

USER_ID VARCHAR2(20)NOT NULL UNIQUE,

USER_PWD VARCHAR2(30)NOT NULL,

USER_NAME VARCHAR2(30),

GENDER VARCHAR2(10),

PHONE VARCHAR2(30),

EMAIL VARCHAR2(50)

);

-- USER_NO 컬럼을 기본키로 설정


-- 데이터 삽입 : 정상 삽입

INSERT INTO USER_PRIMARYKEY1 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');

-- USER_NO 컬럼에 중복된 값 삽입 : UNIQUE 오류

INSERT INTO USER_PRIMARYKEY1 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');

-- USER_NO 컬럼에 NULL 값 삽입 : NOT NULL 오류

INSERT INTO USER_PRIMARYKEY1 VALUES(NULL,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');



-------------------------------------------------------------------

-- PRIMARY KEY 제약조건 2 : 테이블 레벨 설정

-------------------------------------------------------------------

CREATE TABLE USER_PRIMARYKEY2(

USER_NO NUMBER,

USER_ID VARCHAR2(20)NOT NULL UNIQUE,

USER_PWD VARCHAR2(30) NOT NULL,

USER_NAME VARCHAR2(30),

GENDER VARCHAR2(10),

PHONE VARCHAR2(30),

EMAIL VARCHAR2(50),

PRIMARY KEY(USER_NO) -- 테이블 레벨 설정

);

-- USER_NO 컬럼을 기본키로 설정


-- 데이터 삽입 : 정상 삽입

INSERT INTO USER_PRIMARYKEY2 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');

-- USER_NO 컬럼에 중복된 값 삽입 : UNIQUE 오류

INSERT INTO USER_PRIMARYKEY2 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');

-- USER_NO 컬럼에 NULL 값 삽입 : NOT NULL 오류

INSERT INTO USER_PRIMARYKEY2 VALUES(NULL,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');


-------------------------------------------------------------------

-- PRIMARY KEY 제약조건 3 : 테이블 레벨 설정 - 두 컬럼을 묶어서 하나의 PRIMARY KEY로 설정

-------------------------------------------------------------------


CREATE TABLE USER_PRIMARYKEY3(

USER_NO NUMBER,

USER_ID VARCHAR2(20)NOT NULL UNIQUE,

USER_PWD VARCHAR2(30) NOT NULL,

USER_NAME VARCHAR2(30),

GENDER VARCHAR2(10),

PHONE VARCHAR2(30),

EMAIL VARCHAR2(50),

PRIMARY KEY(USER_NAME,PHONE) -- 테이블 레벨 설정

);

-- USER_NAME과 PHONE 을 합쳐서 하나의 PRIMARY KEY로 사용


-- 데이터 삽입 : 정상 삽입

INSERT INTO USER_PRIMARYKEY3 VALUES(1,'USER1','PASS1','홍길동','남','010-1234-1234','hong@kh.or.kr');

-- USER_NAME이 동일하고, PHONE은 다른 데이터 삽입 : 정상 삽입

INSERT INTO USER_PRIMARYKEY3 VALUES(2,'USER2','PASS2','홍길동','남','010-1234-4321','hong@kh.or.kr');

-- USER_NAME은 다르고, PHONE이 같은 데이터 삽입 : 정상 삽입

INSERT INTO USER_PRIMARYKEY3 VALUES(3,'USER3','PASS3','고길동','남','010-1234-4321','hong@kh.or.kr');

-- USER_NAME과 PHONE 모두 같은 데이터 삽입 : 오류 발생

INSERT INTO USER_PRIMARYKEY3 VALUES(4,'USER4','PASS4','고길동','남','010-1234-4321','hong@kh.or.kr');


-- USER_NAME이 NULL이고, PHONE은 정상 데이터 삽입 : 오류 발생

INSERT INTO USER_PRIMARYKEY3 VALUES(5,'USER5','PASS5',NULL,'남','010-4321-4321','hong@kh.or.kr');

-- USER_NAME은 정상 데이터고, PHONE은 NULL 값 삽입 : 오류 발생

INSERT INTO USER_PRIMARYKEY3 VALUES(5,'USER5','PASS5','이길동','남',NULL,'hong@kh.or.kr');



-- 데이터 조회

SELECT * FROM USER_PRIMARYKEY3;



----------------------------------------------------------------------------------------


FOREIGN KEY

참조 무결성을 위한 제약조건

테이블 두 개가 간에 연결을 맺어주는 것


두개의 테이블이 있을 때

참조 당하는 테이블, 참조 하는 테이블이 있음

참조 당하는 테이블의 입장은 내 테이블 그냥 만들어서 쓰면 됨

참조 하는 테이블은 쟤한테 있는 어떤 값만 쓰고 싶음

내 특정 컬럼에는 저 테이블에 있는 어떤 값만 쓸거야 하고 지정을 하는 것

-> 참조키


참조되는 컬럼 : 부모 테이블 컬럼

참조하는 컬럼 : 자식 테이블 컬럼


부모 테이블 컬럼은 UNIQUE랑 NOT NULL 속성이 있어야 한다

참조하려고 하는데 NULL들어있으면 참조할 수가 없고

중복이 있으면 뭘 참조해야할지 모르기 때문에


참조할 테이블(부모테이블)의 참조할 컬럼 명을 생략할 경우

PRIMARY KEY로 설정된 컬럼이 자동으로 참조할 컬럼이 됨

(NULL 값이 있어서도 안되고 중복이 되어서도 안되기 때문에)


자식테이블 컬럼은 제공되는 값 외에 NULL 사용 가능하다.

자식테이블에 UNIQUE나 NULL 같은 제한 걸려있는 것 아니면 중복해서 사용 가능


FOREIGN KEY (G_CODE)REFERENCES USER_GRADE(GRADE_CODE)

FOREIGN KEY (자식테이블에 어떤 컬럼을 참조할지) REFERENCES 부모테이블(부모컬럼)



-------------------------------------------------------------------

-- FOREIGN KEY (외래키) 1

-------------------------------------------------------------------


-- 참조되는 테이블(부모테이블)


CREATE TABLE USER_GRADE(

GRADE_CODE NUMBER PRIMARY KEY,

GRADE_NAME VARCHAR2(30) NOT NULL

);


INSERT INTO USER_GRADE VALUES(10,'일반회원');

INSERT INTO USER_GRADE VALUES(20,'우수회원');

INSERT INTO USER_GRADE VALUES(30,'특별회원');


SELECT * FROM USER_GRADE;


-- 참조하는 테이블(자식테이블)

CREATE TABLE USER_FOREIGNKEY1(

USER_NO NUMBER PRIMARY KEY,

USER_ID VARCHAR2(20),

USER_PWD VARCHAR2(30),

G_CODE NUMBER, -- USER_GRADE 테이블의 GRADE_CODE 컬럼을 참조할 컬럼

FOREIGN KEY (G_CODE)REFERENCES USER_GRADE(GRADE_CODE)

-- FOREIGN KEY (자식컬럼) REFERENCES 부모테이블(부모컬럼)

);


-- G_CODE 컬럼에는 USER_GRADE 테이블의 GRADE_CODE 안에 있는 값만 삽입 될 수 있음



-- 데이터 삽입 : GRADE_CODE 안에 있는 데이터 정상 삽입

INSERT INTO USER_FOREIGNKEY1 VALUES(1,'TEST1','PASS1',10);

INSERT INTO USER_FOREIGNKEY1 VALUES(2,'TEST2','PASS2',20);

INSERT INTO USER_FOREIGNKEY1 VALUES(3,'TEST3','PASS3',30);

-- 참조값 중복 데이터 삽입 : 제약 없으면 정상 삽입

INSERT INTO USER_FOREIGNKEY1 VALUES(4,'TEST4','PASS4',30);

-- 부모컬럼에 없는 값 삽입 : 오류 발생

INSERT INTO USER_FOREIGNKEY1 VALUES(5,'TEST5','PASS5',50);

-- NULL 값 삽입 : NULL 값 정상 삽입

INSERT INTO USER_FOREIGNKEY1 VALUES(6,'TEST6','PASS6',NULL);


SELECT * FROM USER_FOREIGNKEY1;


--------------------------------------------------------------------------------------------------


삭제


만약에 부모테이블이 30을 없애면?

참고 하고 있던 애가 어떻게 해야할지 모름

어떻게 처리할지 옵션으로 지정할 수 있다.


1. 부모가 삭제를 못하게 막아버림

2. 부모가 삭제되면 자식 값을 NULL로 바꿈

3. 부모가 삭제되면 자식도 같이 삭제됨



1. 기본 삭제 옵션


FOREIGN KEY 제약조건으로 USER_GRADE TABLE의 GRADE_CODE 컬럼 참조

USER_GRADE 테이블을 USER_FOREIGNKEY 테이블에서 참조하고 있기 때문에

USER_GRADE 테이블의 데이터 삭제 시 참조 무결성에 위배되어 삭제 불가능

-> 부모테이블의 데이터 삭제 시 자식 테이블의 데이터를 어떤 방식으로 처리할지에 대한 내용을

제약조건 설정 시 옵션으로 지정 가능


-- 기본 삭제 옵션은 ON DELETE RESTRICTED : 자식이 참조 중인 부모 테이블 데이터 삭제 불가능

DELETE FROM USER_GRADE WHERE GRADE_CODE=30; -- 오류 발생



삭제 할 수 있게 만들어 주려면

ON DELETE SET NULL : 부모 테이블의 데이터 삭제 시 참조하고 있는 테이블의 컬럼 값이 NULL로 변경됨

ON DELETE CASCADE : 부모 테이블의 데이터 삭제 시 참조하고 있는 테이블의 컬럼 값이 존재하던 행 전체 삭제




2. ON DELETE SET NULL

부모테이블의 데이터 삭제 시 참조하고 있는 자식 테이블의 컬럼 값이 NULL로 변경됨


-- 참조되는 테이블(부모테이블)

CREATE TABLE USER_GRADE2(

GRADE_CODE NUMBER PRIMARY KEY,

GRADE_NAME VARCHAR2(30) NOT NULL

);


INSERT INTO USER_GRADE2 VALUES(10,'일반회원');

INSERT INTO USER_GRADE2 VALUES(20,'우수회원');

INSERT INTO USER_GRADE2 VALUES(30,'특별회원');


SELECT * FROM USER_GRADE;


-- 참조하는 테이블(자식테이블)

CREATE TABLE USER_FOREIGNKEY3(

USER_NO NUMBER PRIMARY KEY,

USER_ID VARCHAR2(20),

USER_PWD VARCHAR2(30),

G_CODE NUMBER, -- USER_GRADE 테이블의 GRADE_CODE 컬럼을 참조할 컬럼

FOREIGN KEY (G_CODE)REFERENCES USER_GRADE2(GRADE_CODE)ON DELETE SET NULL

-- FOREIGN KEY (자식컬럼) REFERENCES 부모테이블(부모컬럼)

);

-- G_CODE 컬럼에는 USER_GRADE 테이블의 GRADE_CODE 안에 있는 값만 삽입 될 수 있음


-- 데이터 삽입 : GRADE_CODE 안에 있는 데이터 정상 삽입

INSERT INTO USER_FOREIGNKEY3 VALUES(1,'TEST1','PASS1',10);

INSERT INTO USER_FOREIGNKEY3 VALUES(2,'TEST2','PASS2',20);

INSERT INTO USER_FOREIGNKEY3 VALUES(3,'TEST3','PASS3',30);


SELECT * FROM USER_FOREIGNKEY3;


DELETE FROM USER_GRADE2 WHERE GRADE_CODE=30;

SELECT * FROM USER_GRADE2;





3. ON DELETE CASCADE

부모 테이블의 데이터 삭제 시 참조하고 있는 자식 테이블의 컬럼 값이 존재하던 행 전체 삭제


-- 부모테이블 생성

CREATE TABLE USER_GRADE3(

GRADE_CODE NUMBER PRIMARY KEY,

GRADE_NAME VARCHAR2(30) NOT NULL

);

-- 부모테이블 데이터 삽입

INSERT INTO USER_GRADE3 VALUES(10,'일반회원');

INSERT INTO USER_GRADE3 VALUES(20,'우수회원');

INSERT INTO USER_GRADE3 VALUES(30,'특별회원');

-- 부모테이블 데이터 조회

SELECT * FROM USER_GRADE3;


-- 자식테이블 생성

CREATE TABLE USER_FOREIGNKEY4(

USER_NO NUMBER PRIMARY KEY,

USER_ID VARCHAR2(20),

USER_PWD VARCHAR2(30),

G_CODE NUMBER REFERENCES USER_GRADE3(GRADE_CODE) ON DELETE CASCADE

-- 컬럼레벨 작성 : 컬럼명 데이터타입 REFERENCES 부모테이블(부모컬럼)[삭제옵션]

);


INSERT INTO USER_FOREIGNKEY4 VALUES(1,'TEST1','PASS1',10);

INSERT INTO USER_FOREIGNKEY4 VALUES(2,'TEST2','PASS2',20);

INSERT INTO USER_FOREIGNKEY4 VALUES(3,'TEST3','PASS3',30);


SELECT * FROM USER_FOREIGNKEY4;


DELETE FROM USER_GRADE3 WHERE GRADE_CODE=30;

SELECT * FROM USER_GRADE3;



----------------------------------------------------------------------------------------


CHECK 제약조건


해당 컬럼에 입력 되거나 수정되는 값을 체크하여

설정된 값 이외의 값이면 에러 발생

즉, 내가 지정한 값만 입력해라 라고 해주는 것


비교 연산자를 이용하여 조건을 설정하며 비교 값을 리터럴만 사용 가능하고

변하는 값이나 함수 사용은 불가능


CREATE TABLE USER_CHECK(

USER_NO NUMBER PRIMARY KEY,

USER_ID VARCHAR2(20) UNIQUE,

USER_PWD VARCHAR2(30) NOT NULL,

USER_NAME VARCHAR2(30),

GENDER VARCHAR2(5) CHECK(GENDER IN('남','여'))

);

-- 데이터 삽입 : CHECK 조건에 있는 데이터는 정상 삽입

INSERT INTO USER_CHECK VALUES(1,'TEST1','PASS1','TEST1','남');

INSERT INTO USER_CHECK VALUES(2,'TEST2','PASS2','TEST2','여');

-- CHECK 조건에 없는 데이터 삽입: 오류 발생

INSERT INTO USER_CHECK VALUES(3,'TEST3','PASS3','TEST3','M');

SELECT * FROM USER_CHECK;



----------------------------------------------------------------------------------------


DDL (ALTER, DROP)


실습 테이블 형성


CREATE TABLE KH_MEMBER(

NO NUMBER PRIMARY KEY,

NAME CHAR(15),

ID VARCHAR2(20) UNIQUE,

PASSWORD VARCHAR2(50) DEFAULT'1234',

REG_DATE DATE NOT NULL

);


INSERT INTO KH_MEMBER VALUES(1,'홍길동','master','P@ssw0rd',SYSDATE);

INSERT INTO KH_MEMBER VALUES(2,'이길동','tester','1234qwer',SYSDATE);

(SYSDATE -> 현재 날짜를 알아와주는 기본 기능)


----------------------------------------------------------------------------------------


ALTER (표를 바꾸겠다)

테이블에 정의된 내용을 수정할 때 사용하는 데이터 정의어로

컬럼의 추가/삭제, 제약조건의 추가/삭제, 컬럼의 자료형 변경,

DEFAULT 값 변경, 테이블 명/컬럼 명/제약조건 명 변경 등을 할 수 있음


- 표현식

ALTER TABLE 테이블명 <ACTION> <옵션 값...>;

ACTION에 따라서 옵션 값이 달라진다.

ACTION에 따라서 필요한 값들을 넣어준다.


ADD -> column 추가

MODIFY -> column 수정

DROP COLUMN -> column 삭제

RENAME COLUMN -> column명 변경


1. 컬럼 추가(ADD) - 없는 걸 새로 추가

-- ALTER TABLE 테이블명 ADD <컬럼명><데이터타입>[옵션][제약조건];

ALTER TABLE KH_MEMBER ADD AGE NUMBER;

ALTER TABLE KH_MEMBER ADD COUNTRY VARCHAR(30) DEFAULT '한국';


DEFAULT '한국'; ->

새로 생긴 컬럼이기 때문에 기존에 넣어놨던 데이터의 경우에는 이 열이 비어있게 된다. (값을 넣어준 적이 없기 때문에)

따라서 (null)이 됨

그러나 DEFAULT를 적어놓으면 DEFAULT 값이 지정된다.


2. 컬럼 수정(MODIFY) - 기존에 있던 것을 수정

컬럼 NAME CHAR(15); 였던 것을 수정

-- ALTER TABLE <테이블명> MODIFY <컬럼명><데이터타입>[옵션][제약조건];

-- 데이터에 미리 NULL이 들어가 있는 경우 NOT NULL 제약조건 설정하면 오류 발생함

ALTER TABLE KH_MEMBER MODIFY NAME VARCHAR(15) NOT NULL;

ALTER TABLE KH_MEMBER MODIFY PASSWORD VARCHAR2(50) DEFAULT 'qwer1234';


3. 컬럼 삭제(DROP COLUMN) - 특정 컬럼 삭제

-- ALTER TABLE <테이블명> DROP COLUMN <컬럼명>;

ALTER TABLE KH_MEMBER DROP COLUMN NO;

ALTER TABLE KH_MEMBER DROP COLUMN AGE;


DESC KH_MEMBER;

SELECT * FROM KH_MEMBER;


-- default 옵션 확인

INSERT INTO KH_MEMBER VALUES('고길동','TEST1',NULL,SYSDATE,NULL);

INSERT INTO KH_MEMBER(NAME,REG_DATE)VALUES('최길동',SYSDATE);



4. 컬럼 이름 변경(RENAME COLUMN)

-- ALTER TABLE <테이블명> RENAME COLUMN <기존컬럼명> TO <변경할컬럼명>;

ALTER TABLE KH_MEMBER RENAME COLUMN ID TO U_ID;

ALTER TABLE KH_MEMBER RENAME COLUMN PASSWORD TO U_PASS;


DESC KH_MEMBER;

SELECT * FROM KH_MEMBER;


----------------------------------------------------------------------------------------


제약조건 자체에도 별도의 이름을 지정할 수 있다

제약조건도 추가, 수정, 삭제 가능


----------------------------------------------------------

-- 제약조건 수정

----------------------------------------------------------

-- 제약조건 조회

-- 특정 테이블 내 제약조건 이름, 타입 조회

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='KH_MEMBER';


-- 제약조건 적용 컬럼 조회

SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME='KH_MEMBER';

SELECT * FROM USER_CONS_COLUMNS WHERE CONSTRAINT_NAME='SYS_C007036';


-- 제약조건 추가(ADD CONSTRAINTS)

ALTER TABLE KH_MEMBER ADD CONSTRAINT MEM_PASS_UNQ UNIQUE(U_PASS);

DELETE FROM KH_MEMBER; -- 테이블에 있는 모든 데이터 삭제

DELETE FROM KH_MEMBER WHERE NAME='고길동'; -- 특정 데이터 삭제(이름이 고길동인 데이터 삭제)

SELECT * FROM KH_MEMER;

﻿
