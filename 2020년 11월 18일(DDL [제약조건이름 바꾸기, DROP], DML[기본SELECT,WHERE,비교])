
2020년 11월 18일


어제 배운 것 정리


DDL 데이터베이스의 구조를 정의하는 것

CREATE / ALTER / DROP / .TRUNCATE


DML 데이터 조작어 실제 데이터를 삽입하거나 수정하거나 삭제하거나 조회하거나

INSERT / UPDATE / DELETE / SELECT


DCL 데이터 제약어

GRANT / REVOKE / COMMIT / ROLLBACK



CREATE 뭘 생성할건지 생성하고자하는 객체의 이름 추가적이 옵션(

표에 뭘 그릴지

컬럼명 데이터타입 [옵션] [제약조건],

...

);


데이터타입 어떤 형태의 데이터가 저장될지 저장

NUMBER 숫자

CHAR 문자

VARCHAR2 문자

CHAR와 VARCHAR2의 차이는 공간의 크기 가변,불변

DATE


옵션

DEFAULT 해당 컬럼에 따로 값을 입력하지 않았을 때 자동으로 입력되게 하고 싶을 때


제약조건 컬럼에 들어갈 데이터에 조건을 걸어놓는걸

NOT NULL, UNIQUE, PRIMARY KEY (테이블의 기준이 되는 컬럼을 정해놓는 것 NOT NULL과 UNIQUE속성),

FOREIGN KEY 외래키 참조키 (내 컬럼에 들어갈 데이터를 다른 테이블에서 참조하는 것),

CHECK (컬럼에 들어갈 데이터를 미리 정해놓는 것)


ALTER 객체의 종류 객체의 이름 액션 내용


--------------------------------------------------------------------------------------


제약조건 추가하기 (ADD CONSTRAINT)

ALTER TABLE KH_MEMBER ADD CONSTRAINT MEM_PASS_UNQ UNIQUE(U_PASS);

ALTER TABLE KH_MEMBER ADD CONSTRAINT MEM_NAME_UNQ UNIQUE(U_NAME);


-- 두개 중복해서 제약조건 걸어주기

ALTER TABLE KH_MEMBER ADD CONSTRAINT MEM_PASS_NAME_UNQ UNIQUE(U_PASS, U_NAME);

-> U_PASS와 U_NAME가 모두 같은 값일 경우 중복 불가능


DROP CONSTRAINT

-- 제약조건 삭제(DROP CONSTRAINT)

ALTER TABLE KH_MEMBER DROP CONSTRAINT MEM_PASS_UNQ;

(컬럼이 삭제되는게아니라 제약조건만 삭제한 것)


--------------------------------------------------------------------------------------


제약조건 삭제 (DROP CONSTRAINT)

ALTERT TABLE 테이블명 DROP CONSTRAINT <제약조건명>;


-- U_ID에 PRIMARY KEY 제약조건 추가하고 싶음

-- MODIFY를 이용해서도 제약조건 추가 가능

ALTER TABLE KH_MEMBER MODIFY U_ID VARCHAR2(20) PRIMARY KEY; -- 오류발생


오류 발생 이유:

U_ID에 이미 UNIQUE 제약조건이 걸려있음

PRIMARY KEY -> NOT NULL이랑 UNIQUE 같이 걸려야 함

UNIQUE가 먼저 걸려 있었다면 UNIQUE를 삭제하고 다시 PRIMARY KEY 제약조건 걸어줘야 한다.

필요없는 제약조건이나 문제가되는 제약조건을 삭제할 수 있어야 한다.


해결 방법: 이미 걸려있던 UNIQUE 제약조건을 삭제한 후에 PRIMARY KEY 제약조건을 건다.

-- 제약조건 삭제(DROP CONSTRAINT)

ALTER TABLE KH_MEMBER DROP CONSTRAINT SYS_C007036;

-- U_ID컬럼의 UNIQUE 제약조건 삭제


-- MODIFY를 이용해서도 제약조건 추가 가능

ALTER TABLE KH_MEMBER MODIFY U_ID VARCHAR2(20) PRIMARY KEY;

-- U_ID 컬럼에 다시 PRIMARY KEY 설정 시 정상 작용


DELETE FROM KH_MEMBER WHERE U_ID IS NULL; -- U_ID가 NULL인 데이터 삭제


--------------------------------------------------------------------------------------


제약조건 이름 변경 (RENAME CONSTRAINT)

ATLERT TABLE<테이블명> RENAME CONSTRAINT <기존 제약조건명> TO <변경할 제약조건명>;


ALTER TABLE KH_MEMBER RENAME CONSTRAINT SYS_C007039 TO MEM_ID_PRI;

ALTER TABLE KH_MEMBER RENAME CONSTRAINT SYS_C007037 TO MEM_NAME_NN;



아예 테이블을 생성할 때 제약조건 이름도 같이 생성하고 싶어


-- 테이블 생성 시 제약조건 이름 명시 : 컬럼 레벨 설정

CREATE TABLE CONST_NAME(

U_NO NUMBER CONSTRAINT PK_U_NO PRIMARY KEY,

U_ID VARCHAR(30) CONSTRAINT UK_U_ID UNIQUE,

U_PW VARCHAR(50) CONSTRAINT NN_U_PW NOT NULL

);


SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='CONST_NAME';


-- 테이블 생성 시 제약조건 이름 명시 : 테이블 레벨 설정

CREATE TABLE CONST_NAME2(

U_NO NUMBER,

U_ID VARCHAR(30),

U_PW VARCHAR(50)CONSTRAINT NN_U_PW2 NOT NULL,

CONSTRAINT PK_U_NO2 PRIMARY KEY(U_NO),

CONSTRAINT UK_U_ID2 UNIQUE(U_ID)

);

-- 제약조건이름은 테이블이 달라도 같은 이름 사용할 수 없다.

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='CONST_NAME2';


--------------------------------------------------------------------------------------


테이블 이름 변경

1. ALTER TABLE <기존 테이블명> RENAME TO <변경할 테이블명>;

ALTERT TABLE KH_MEMBER RENATME TO KH_MEM;


2. RENAME <기존 테이블명> TO <변경할 테이블명>;

RENAME KH_MEM TO KH_MEMBER;


--------------------------------------------------------------------------------------


DROP

데이터베이스 객체를 삭제하는 구분

CREATE를 이용해 만든 객체는 DROP을 이용해서만 삭제할 수 있다.


DROP TABLE 테이블명;

DROP TABLE KH_MEMBER;


DDL 마무리


--------------------------------------------------------------------------------------


DDL을 이용해서 테이블을 만들어놨음

그 안에 데이터를 입력하고 수정하고 삭제하고 조회해야함


DML

(SELECT)

SQL에서 가장 많이 쓰고 어려운 부분

가공해서 가져오기 위해 많은 문법들이 있다.


이 데이터를 가져다 쓰는건 사용자가 직접 가져다 쓰는게 아님

다양한 프로그램, 다양한 언어를 활용해서 가져다 씀

(웹, 자바 등)

가지고온 데이터를 통해 다양한 연산을 한다던지, 조건을 비교한다던지

다양한 작업을 할 수 있음

1. 데이터베이스에서 데이터 다 가지고 온 다음에 프로그램에서 가공

2. 그 데이터들을 데이터베이스에서 먼저 조금이라도 더 가공해서 가져오는게 성능적으로 좋음

(데이터베이스한테 그 특정 데이터만 줘 하는 것)

그래서 우리가 데이터베이스에게 명령하는 법을 배우는 것



용어 정리

1. 연관된 데이터 - 행(Row), 튜플, 레코드

2. 같은 속성을 가진 데이터 - 컬럼, 도메인, 필드, 열, attribute

3. 이 모든 데이터를 유일하게 식별하기 위해 기준이 되는 컬럼을 만듬 - 기본키 (Primary Key)

4. 첫번째 테이블에 SAL_LEVEL에 들어가는 들어가는 데이터는 두번째 테이블에 들어가는 SAL_LEVEL만 쓰고 싶다

-외래키(Foreign Key)

5. 데이터가 없는 것 - NULL

6. 하나하나의 컬럼 데이터 - 컬럼값, 속성값, 필드


--------------------------------------------------------------------------------------


SQL(Structured Query Language)

구조화된 질의 언어

구조에 맞춰서 데이터베이스에 물어보면 그것에 대해 답을 해준다.


관계형 데이터베이스에서 데이터를 조회하거나 조작하기 위해 사용하는

표준 검색 언어로 원하는 데이터를 찾는 방법이나 절차를 기술하는 게 아닌

조건을 기술하여 작성





--------------------------------------------------------------------------------------


SELECT


데이터를 조회한 결과를 Result Set(테이블의 형태로 결과값을 묶어 놓은 것)이라고 하는데

SELECT 구문에 의해 반환된 행들의 집합을 의미함

Result Set은 0개 이상의 행이 포함될 수 있고 특정 기준에 의해 정렬 가능한

테이블의 특정 컬럼, 행 , 행/컬럼 또는 여러 테이블의 특정 행/컬럼 조회 가능


데이터를 조회함


여러데이터를 한번에 조회할것임

이것을 우리에게 보여줄 기준이 있어야 함

테이블의 형태로 보여줄 것



- 표현법

뭘 조회?

SELECT 컬럼 명, [, 컬럼명, ...]


어디로 부터 조회해올거냐

FROM 테이블 명


WHERE 조건식; (추가 조건)


SELECT 컬럼명 [, 컬럼명, ...] FROM <테이블명> [WHERE 조건식]




* SELECT

조회하고자 하는 컬럼명 기술

여러 컬럼을 조회하는 경우 컬럼은 쉼표로 구분하고, 마지막 컬럼 다음은 쉼표를 사용하지 않음

모든 컬럼 조회 시 컬럼 명 대신 '*' 기호 사용 가능하며 조회 결과는 기술한 컬럼 명 순으로 표시 됨


* FROM

조회 대상 컬럼이 포함된 테이블 명 기술


* WHERE

행을 선택하는 조건 기술

여러 개의 제한 조건 포함할 수 있으며, 각가의 제한 조건은 논리 연산자로 연결

제한 조건을 만족시키는 행들만 Result Set에 포함




CREATE TABLE "KH"."DEPARTMENT"

KH계정에서 만들어진 DEPARTMENT 테이블이라는 뜻

테이블 생성하면 자동으로 계정 붙는다.



--------------------------------------------------------------------------------------


기본 SELECT


-- 테이블 목록 조회

SELECT * FROM TABS;


-- 테이블 구조 확인 : 컬럼 정보 확인

DESC EMPLOYEE;


-- 직원 테이블(EMPLOYEE)에서 아이디(EMP_ID), 이름(EMP_NAME), 전화번호(PHONE)를 조회

SELECT EMP_ID, EMP_NAME, PHONE FROM EMPLOYEE;


-- 직원 테이블(EMPLOYEE)에서 모든 정보를 조회

SELECT * FROM EMPLOYEE;


-- 직원 테이블(EMPLOYEE)에서 이름, 전화번호, 이메일 순서대로 컬럼을 조회

SELECT EMP_NAME, PHONE, EMAIL FROM EMPLOYEE;


-- 직원 테이블(EMPLOYEE)에서 이름이 '유재식'인 레코드(행)를 조회

SELECT * FROM EMPLOYEE WHERE EMP_NAME='유재식';


-- 직원 테이블(EMPLOYEE)에서 직급코드(JOB_CODE)가 'J3'인 레코드를 조회

SELECT * FROM EMPLOYEE WHERE JOB_CODE='J3';


--------------------------------------------------------------------------------------


-- 컬럼 값 산술 연산 : 컬럼 값에 대한 산술 연산한 결과 값 조회 가능

SELECT EMP_NAME, SALARY FROM EMPLOYEE; -- 이름과 급여 조회

SELECT EMP_NAME, SALARY *5 FROM EMPLOYEE; -- 급여 컬럼에 연산 후 결과값 조회

SELECT EMP_NAME, SALARY, SALARY*BONUS, SALARY + (SALARY*BONUS) FROM EMPLOYEE;


컬럼의 이름이 SALARY*BONUS 이런식으로 나오기 때문에 이 컬럼이 무슨 컬럼인지 표에서 알기 힘들다

컬럼에 별칭을 붙이자


-- 컬럼 별칭 :

-- 표현법1 : 컬럼명 AS 별칭

-- 표현법2 : 컬럼명 별칭 (AS 생략가능)


표현법 1: 컬럼명 AS 별칭

SELECT EMP_NAME AS 이름,

SALARY AS 급여,

SALARY*BONUS AS 보너스,

SALARY + (SALARY*BONUS)AS 총급여

FROM EMPLOYEE;


표현법 2: 컬럼명 별칭

SELECT EMP_NAME AS 이름,

SALARY 급여, -- AS 생략 가능 (공백으로 구분)

SALARY*BONUS AS 보너스,

SALARY + (SALARY*BONUS)AS "총 급여" -- 숫자나 특수문자가 포함되는 경우 " " 사용

FROM EMPLOYEE;



-- 리터럴 (직접 명령문에 값을 입력하는 것) :

-- 임의로 지정한 문자열을 SELECT 절에서 사용하면 테이블에 존재하는 데이터처럼 활용 가능

-- * 문자나 날짜 리터럴은 ' '사용

-- * 리터럴은 RESULT SET의 모든 행에 반복 표시 됨

SELECT EMP_NAME, SALARY, '원' AS 단위 FROM EMPLOYEE;

-> 급여에 대한 단위를 원으로 통일하고싶어



SELECT EMP_NAME, SALARY+10 FROM EMPLOYEE;

10도 리터럴이됨

' 직접 명령문에 입력하는 값들 '




나는 직급코드 조회를 하긴 할건데 중복된거 빼고 조회하고 싶어




-- 중복제거 : DISTINCT

-- 컬럼에 포함된 데이터 중 중복 값을 제외하고 한번씩만 조회하고자 할 때 사용

-- * 하나의 SELECT 절에서 1개만 사용 가능

SELECT JOB_CODE FROM EMPLOYEE; -- 중복 값 모두 조회

SELECT DISTINCT JOB_CODE FROM EMPLOYEE; -- 중복 값 제외 조회 ( JOB_CODE에 대한 중복값만 제외)

-- SELECT DISTINCT JOB_CODE, DISTINCT DEPT_CDE FROM EMPLOYEE; -- 오류 발생

SELECT DISTINCT JOB_CODE, DEPT_CODE FROM EMPLOYEE; -- 여러 컬럼을 묶어서 중복 값 제외

-- JOB_CODE와 DEPT_CODE가 둘다 동일한 값을 중복으로 처리







--------------------------------------------------------------------------------------


WHERE 절

내가 원하는 데이터를 조회하기 위해서는 WHERE 절을 잘 사용해야 한다


-----------------------------------------------------


WHERE 절 : 검색할 컬럼의 조건을 설정하여 행을 결정

테이블에서 조건을 만족하는 값을 가진 행을 골라냄

여러 개의 조건을 만족하는 행을 골라 낼 때는 AND 혹은 OR을 사용할 수 있음



-- 부서코드가 'D9'인 직원의 이름, 부서코드 조회

SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE WHERE DEPT_CODE='D9';


-- 급여가 4000000 보다 많은 직원 이름과 급여 조회

SELECT EMP_NAME , SALARY FROM EMPLOYEE WHERE SALARY >= 4000000;




-----------------------------------------------------



논리 연산자

여러 개의 제한 조건 결과를 하나의 논리 결과로 만들어 줌


조건을 여러 개 지정해서 조회하고 싶은 경우 사용

AND , OR

조건과 반대의 결과를 조회하고 싶은 경우

NOT



-- 부서코드가 'D6'이고, 급여를 2000000 보다 많이 받는 직원의 이름, 부서코드, 급여 조회

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE DEPT_CODE='D6' AND SALARY >= 2000000;


-- 부서코드가 'D6'이거나, 급여를 2000000 보다 많이 받는 직원의 이름, 부서코드 , 급여 조회

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE DEPT_CODE='D6' OR SALARY >= 2000000;


-- 부서코드가 'D6'이 아니고, 급여를 2000000 미만으로 받는 직원의 이름, 부서코드 , 급여 조회

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE DEPT_CODE != 'D6' AND SALARY < 2000000;


-- 또는

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE NOT DEPT_CODE='D6' AND NOT SALARY >= 2000000;

-- DEPT_CODE 가 D6이 아니고, SALARY 가 2000000 이상이 아닌 데이터

-- DEPT_CODE = 'D6' : DEPT_CODE 가 D6이 아니니?

-- NOT SALARY >= 2000000 : SALARY가 2000000 이상이 아니니?

-- 위 두 조건이 모두 만족하니?


SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE NOT (DEPT_CODE='D6' AND SALARY >= 2000000);

-- DEPT_CODE가 D6이거나 SALARY가 2000000 이상이 아닌 데이터

-- DEPT_CODE = 'D6' : DEPT_CODE가 D6 이 맞니?

-- SALARY >= 2000000 : SALARY가 2000000이상이 맞니?

-- OR : 위 두 조건 중 하나라도 만족하니?

-- NOT : 위 두 조건의 반대니?


SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE NOT (DEPT_CODE='D6' OR SALARY >= 2000000);

-- DEPT_CODE가 D6이고, SALARY가 2000000 이상이 아닌 데이터

-- DEPT_CODE = 'D6' : DEPT_CODE가 D6 이 맞니?

-- SALARY >= 2000000 : SALARY가 2000000이상이 맞니?

-- AND : 위 두 조건 모두 만족하니?

-- NOT : 위 조건의 반대니?


NOT-> 결과값에 대해서 반대


--------------------------------------------------------------------------------------


NOT 조건1 AND NOT 조건2

NOT (조건1 AND 조건2)

NOT (조건1 OR 조건2)


1번째 : NOT 조건1 AND NOT 조건2

조건1 조건2 -> 조건1 조건2 -> AND

O O X X X

O X X O X

X O O X X

X X O O O


2번째 : NOT (조건1 AND 조건2)

조건1 조건2 -> AND -> NOT

O O O X

O X X O

X O X O

X X X O


3번째 : NOT (조건1 OR 조건2)

조건1 조건2 -> OR -> NOT

O O O X

O X O X

X O O X

X X X O



--------------------------------------------------------------------------------------


연결 연산자

여러 컬럼을 하나의 컬럼인 것 처럼 연결하거나 컬럼이나 리터럴을 연결함

ORACLE : ||

MYSQL : +

MSSQL : (공백)



-- 컬럼과 컬럼을 연결한 경우

SELECT EMP_NAME, EMP_ID || DEPT_CODE || JOB_CODE AS 사원식별번호 FROM EMPLOYEE;




-- 컬럼과 리터럴을 연결한 경우

SELECT EMP_NAME || '님의 월급은 ' || SALARY ||'원 입니다.' FROM EMPLOYEE;




--------------------------------------------------------------------------------------


비교연산자

표현식 사이의 관계를 비교하기 위해 사용

비교 결과는 논리 결과(TRUE/FALSE/NULL) 중 하나가 됨

단, 비교하는 두 값은 동일한 데이터 타입이어야 한다


주요 비교 연산자 : = , > , < , >= , <= , <>, != ,^=

BETWEEN AND, LIKE, NOT LIKE, IS NUL, IS NOT NULL, IN , NOT IN



-- '같지 않다' 비교 방법 3가지

SELECT EMP_ID, EMP_NAME, DEPT_CODE FROM EMPLOYEE

WHERE DEPT_CODE != 'D9';

SELECT EMP_ID, EMP_NAME, DEPT_CODE FROM EMPLOYEE

WHERE DEPT_CODE ^= 'D9';

SELECT EMP_ID, EMP_NAME, DEPT_CODE FROM EMPLOYEE

WHERE DEPT_CODE <> 'D9';


-- BETWEEN AND : 비교하려는 값이 지정한 범위에 포함되면 TRUE를 리턴

-- 연산자 상한 값과 하한 값의 경계도 포함됨 ( >= , <= )

-- 급여를 350만 보다 많이 받고, 600만 보다 적게 받는 직원 이름과 급여 조회

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE SALARY >= 3500000 AND SALARY <= 6000000;

-- 또는

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE SALARY BETWEEN 3500000 AND 6000000;

-- 급여를 350만 미만, 또는 600만을 초과하는 직원 이름과 급여 조회

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE SALARY < 3500000 OR SALARY > 6000000;

-- 또는

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE SALARY NOT BETWEEN 3500000 AND 6000000;

-- NOT 연산자는 컬럼명 앞에 붙여도 되고 BETWEEN 앞에 붙여도 됨


-- LIKE : 비교하려는 값이 지정한 특정 패턴을 만족하면 TRUE를 리턴

-- 표현식 : 컬럼명 LIKE '문자패턴'

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE EMP_NAME LIKE '송은희'; -- 이름이 '송은희'인 직원

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE EMP_NAME LIKE '송'; -- 성이 '송'으로 시작되는 직원 조회

-- LIKE를 이렇게 쓰면 '송'과 정확하게 일치하는 데이터만 찾기 때문에 아무것도 조회 안됨


-- 와일드카드문자 사용

-- % : 글자 수 상관없이 모든 문자를 의미

-- _ : 한자리의 모든 문자를 의미

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE EMP_NAME LIKE '송%'; -- 성이 '송'으로 시작되는 직원 조회

-- 첫글자가 송이고 그 뒤로는 뭐가 오든 상관 없음 송X,송XX 다 올 수 있음

SELECT EMP_NAME, SALARY FROM EMPLOYEE

WHERE EMP_NAME LIKE '송__'; -- 성이 '송'으로 시작되는 직원 조회

-- 송XX인 이름을 찾고 싶음, 언더바 2개

SELECT EMP_NAME, EMP_NO FROM EMPLOYEE

WHERE EMP_NO LIKE '_______1%'; -- 주민번호 8번째 자리가 1인 직원 조회(남직원만 조회)


/*

와일드 카드 문자와 찾고자하는 패턴의 문자가 동일한 경우

어떤 것을 패턴으로 결정하는지 구분이 안됨(%,_ 문자를 찾고 싶을 때)

데이터로 처리할 와일드 카드 문자 앞에 임의의 특수문자를 사용

ESCAPE OPTION 으로 등록해서 처리

*/

-- EMAIL 의 4번째 자리에 _ 문자가 오는 직원 이름, 이메일 조회

SELECT EMP_NAME, EMAIL FROM EMPLOYEE

WHERE EMAIL LIKE '____%'; -- 4번째 _를 문자가 아닌 와일드카드로 인식하여 모든 데이터 조회

SELECT EMP_NAME, EMAIL FROM EMPLOYEE

WHERE EMAIL LIKE '___#_%'ESCAPE '#'; -- # 뒤에 오는 와일드카드는 문자 그대로 인식해서 조회

-- # 말고 다른 쓰고 싶은 거 써도 됨 \, @ 등등

SELECT * FROM EMPLOYEE;


-- NOT LIKE

-- '이' 씨 성이 아닌 직원 이름, 이메일 조회

SELECT EMP_NAME, EMAIL FROM EMPLOYEE

WHERE EMP_NAME NOT LIKE '이%';


-- IS NULL, IS NOT NULL : NULL 여부를 비교하는 연산자

-- NULL 값 조회 : 보너스가 없는 직원

SELECT EMP_ID, EMP_NAME, SALARY, BONUS FROM EMPLOYEE

WHERE BONUS IS NULL;

-- NULL이 아닌 값 조회 : 보너스가 있는 직원

SELECT EMP_ID, EMP_NAME, SALARY, BONUS FROM EMPLOYEE

WHERE BONUS IS NOT NULL;

-- 관리자도 없고, 부서배치도 받지 않은 직원 조회

SELECT EMP_NAME, SALARY, BONUS, MANAGER_ID, DEPT_CODE FROM EMPLOYEE

WHERE MANAGER_ID IS NULL AND DEPT_CODE IS NULL;

-- 부서배치를 받지 않았지만, 보너스를 지급 받는 직원

SELECT EMP_NAME, SALARY, BONUS, DEPT_CODE FROM EMPLOYEE

WHERE DEPT_CODE IS NULL AND BONUS IS NOT NULL;


-- IN : 비교하려는 값 목록에 일치하는 값이 있으면 TRUE를 반환

-- D6 부서와 D8 부서원들의 이름, 부서코드 급여 조회

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE DEPT_CODE = 'D6' OR DEPT_CODE = 'D8';

-- 또는

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE DEPT_CODE IN ('D6','D8');


-- NOT IN : 목록에 포함되지 않는 데이터를 조회

-- D6 부서와 D8 부서원을 제외한 부서원들의 이름, 부서코드, 급여 조회

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE

WHERE DEPT_CODE NOT IN ('D6','D8');



연산자 우선순위

조건에 여러개의 연산자가 올 경우 먼저 연산될 기준

1. 산술연산자

2. 연결연산자

3. 비교연산자

4. IS NULL / IS NOT NULL, LIKE, IN / NOT IN

5. BETWEEN AND / NOT BETWEEN AND

6. NOT - 논리 연산자

7. AND - 논리 연산자

8. OR - 논리연산자




--------------------------------------------------------------------------------------


-- 'J4' 또는 'J7' 직급 코드 중 급여를 200만 보다 많이 받는 직원 이름, 급여, 직급코드 조회

IN 쓰기

SELECT EMP_NAME, SALARY, JOB_CODE FROM EMPLOYEE

WHERE JOB_CODE IN ('J4','J7') AND SALARY >= 2000000;

OR 쓰기

SELECT EMP_NAME, SALARY, JOB_CODE FROM EMPLOYEE

WHERE (JOB_CODE = 'J4' OR JOB_CODE = 'J7') AND SALARY >= 2000000;

SELECT * FROM EMPLOYEE;



SELECT EMP_NAME, SALARY, JOB_CODE FROM EMPLOYEE

WHERE JOB_CODE = 'J4' OR JOB_CODE='J7' AND SALARY >= 2000000;

﻿
